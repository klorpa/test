・1739c
1. 文字列変数に対するVARSETが正しく動作しないのを修正
2. デバッグコマンドでユーザー定義文中関数を呼び出しエラーを出すと、ユーザー定義関数がデバッグコマンドで正常に動作しなくなるのを修正
3. TWAITに対して\nを打ち込むと、状況次第では動作が異常になるのを修正
4. _Replace.csvのパース処理に問題があったのを修正
　　　区切り文字の,の前にスペースがないと、1項目の最後の文字がなくなる問題があった
5. ADDCHARA、ADDSPCHARA、DELCHARAを複数数値引数に対応
　　　一度にたくさんのキャラを足したり消せるようになりました
6 指定したキャラのみを抽出し、他を削除するPICKUPCHARA追加
　　書式：PICKUPCHARA <対象キャラ>(, <対象キャラ>, ....)
　　内容：引数で与えたキャラのみを残し他を全て削除
　　　　　TARGET等の変数は処理に追随します
　　　　　基本負の値は御法度ですが、例外としてMASTER、TARGET、ASSIのみ負の値の場合無視するようにしています
7. 文字列に対してUNICODEのバイトコードを返すENCODETOUNI実装
　　書式：ENCODETOUNI <対象文字列(FORM型文字列)>
　　内容：与えられた文字列をユニコードにエンコードしてそのバイトを数値として返す
　　　　　RESULT:0 　文字数
　　　　　RESULT:1〜 バイト数値
8. エラーの表示に表示スタイルが反映されないようにした
9. 関数引数周りのエラーに関する処理周りの手入れ
10. 右矢印キーの動作に関するエンバグを修正

・1739b
1. 引数のないいくつかの命令が例外を吐く問題を修正
2. 引数のないCUSTOMDRAWLINEが無限ループに入るのを修正
3. GETSTYLE命令が命令として認識できないのを修正
4. RichTextBoxにテキスト以外がペーストできたのを不可に
5. システム入力待ち時に引数を持つユーザー定義文中関数をデバッグから呼び出せないのを修正

・1739a
1. TRYCJUMP、TRYCGOTOが意図通り動作しないのを修正
2. オプションのボタンを折り返さないがONの時、PRINTBUTTONの後にDRAWLINEなどの行をまたぐような表示処理をすると
　 意図と反して改行してしまうのを修正
3. 配列をシフトする命令ARRAYSHIFT実装
　書式：ARRAYSHIFT <対象変数>, <ずらす数>, <ずらしてできた空白領域の初期値>{, <ずらず配列範囲の初値>, <ずらす配列要素の範囲の数>}
　内容：配列変数を指定した数だけずらす、正の値で添え字の大きい方へ、負の値で小さい方にずらす
　　　　配列の範囲からはみでた値は掃き捨て、ずらして出来た空白領域は第2引数で指定した値で満たす
　　　　省略可能な第4および第5引数を使うと一部の範囲のみをずらすことができる
4. 配列要素を部分削除する命令ARRAYREMOVE実装
　書式：ARRAYREMOVE <対象変数>, <消す範囲初値>, <消す要素数>
　内容：配列変数を指定した初期値から要素数分だけ削除し、後ろを値を詰める
　　　　消す要素数を0以下にすると初期値から後ろ全て消去になります
5. 指定した値群が全て異なる値かをチェックする命令NOSAMES実装
　書式：NOSAMES(<値1>, <値2>{, <値3>, ...})
　内容：引数に渡した値が「全て異なる」ものであれば1を返す、そうでなければ0を返す
6. 指定した値群が全て同じ値かをチェックする命令ALLSAMES実装
　書式：ALLSAMES(<値1>, <値2>{, <値3>, ...})
　内容：引数に渡した値が「全て同じ」であれば1を返す、そうでなければ0を返す
7. 関数重複の警告を解析モードでは強制表示するように変更、表示がおかしいのを修正、最初に定義された場所を表示するように変更
8. 状況によって不必要にサウンドが鳴ることがあるのを修正
9. SETCOLOR等でフォントが色や太字等になっている状態でタイトルに戻った場合、変更が反映された状態のままなのを修正
10. CSVでの EQUIPに対応する表記「装着物」追加

・1738h
1. ONEINPUT系に関する大がかりな修正
　　報告されていた様々なトラブルに対応
　　既存のフレームワークでは綺麗に動かすのは困難と判断し、入力部分のコントロールをtextBoxからRichTextBoxに変更。
　　この変更に関する修正込み

・1738g
1. 代入行に対する_Rename.csvによる置換の挙動に問題があったのを修正
2. ONEINPUTと(ONE)INPUTSの組み合わせが（ONE)INPUTSがスキップされる場合があるのを修正
3. 解析モード時にERBファイル内の関数の一覧を表示するように変更

・1738f
1. CALLFORM等で三項演算子が使えないのを修正
2. CSVXXX系で第2引数に負の値を与えると例外を吐くものがあるのを修正
3. エラーログからのテキストエディタ起動関係で、引数が最後に半角スペースを要求する場合に正しく処理できない等を修正
4. メニューからERBファイルを読み直すとき、_rename.csvの内容が反映されないのを修正
5. 一文字限定入力自動処理命令ONEINPUT、ONEINPUTS実装
　書式：ONEINPUT or ONEINPUTS
　内容：一文字のみの入力を受け付ける、入力すると自動的に次の処理に移る
6. 変数の値の複数からの一致確認命令GROUPMATCH実装
　書式：GROUPMATCH(<値1>, <値2>，{<値3>,...})
　内容：値2から値N（任意の数）までの値に値1と同じ値のものが何個あるかを返す、ない場合は当然0
7. STRFINDのユニコード版STRFINDU実装
　書式：STRFINDU(<検索対象>, <検索する文字列>{, <開始インデックス>})
　内容：STRFINDのユニコード版、返り値の文字の位置と開始インデックスがユニコードでのカウントになっている
8. PRINTBUTTONのPRINTC、PRINTLCタイプ、PRINTBUTTONC、PRINTBUTTONLC実装
　書式：PRINTBUTTONC <表示文字列>, <ボタンの値(数値or文字列)>
　　　　PRINTBUTTONLC <表示文字列>, <ボタンの値(数値or文字列)>
　内容：PRINTBUTTONをPRINTC、PRINTLCと同様の整形で表示する
9._replace.erbでPBAND:0の初期値を指定できるように修正
　書式：PBANDの初期値, <値>
10. REDRAW 0時にログ描写が乱れるのを修正
11. GDI+でフォントサイズを変更して再起動するとPRINTBUTTONやPRINTC系がずれてしまうバグを修正

・1738e
1. REDRAW 0を指定時にメニューからタイトルに戻るとREDRAW 0の状態が引き継がれてしまうのを修正
　　その他コードの読み直し等REDRAW 0であるべきでない状況が呼び出される時は一時的にREDRAW 0を解除
2. コード実行中のエラーについて、エラー表示をボタン化し、テキストエディタで開けるように
　　デフォルトは確実に入っているnotepad
　　設定からエディタのパス指定が可能
　　また、コマンドライン引数から行数指定が可能なエディタは、
　　下のコマンドライン引数の項目に、その指定用の引数を指定
　　　（terapadであれば"/jl=XX"なので"/jl="）
　　すれば、その行にあわせて開いてくれる…はず
　　起動時解析中のエラーはボタン関係の処理が難しいので対応できない公算大
3. ログの行数の下限を500行に
　　あまりに少なすぎると表設定によっては例外が発生するため
4. PRINTBUTTONで改行コードをomitするように変更
　　ボタン周りは改行を考慮していないため

・1738d
1. $で始まるGOTO用ラベルの同一関数内での重複を捕まえられていなかったのを修正
　　重複したラベルにGOTOかけると最初に定義した方に飛ぶため、予期せぬ動作を招く場合がある
　　なので、警告として表示すべきだったが、処理ミスで表示できていなかった
2. SAVEDATAの第2引数に改行文字"\n"を使えないように変更
　　セーブデータが壊れるための処置
3. 特定条件でUPCHECKが処理されないのを修正
　　普通はこのような状況は起こらないはずだが念のため

・1738c
1. DO〜LOOP内でのCONTINUEが例外になる場合があるのを修正
　　引数解析をしない場合、処理中で未処理の引数の値を取得しようとして例外を吐いていた
2. EXPLVおよびPALAMLVの初期値指定を_replace.csvで可能にした
　書式：EXPLVの初期値, <初期値"/"区切りで>
　　　　PALAMLVの初期値, <初期値"/"区切りで>
3. CUP、CDOWNに対応するUPCHECKであるCUPCHECK追加
　書式：CUPCHECK <キャラ>
　内容：引数で指定したキャラに対するUPCHECKを走らせる、それだけ
4. 西暦1年1月1日からの経過時間を秒で取れるGETSECOND追加
　書式：GETSECOND（命令形式）
　　　　GETSECOND() （式中関数形式）
　内容：上のとおり、2回使って経過時間を秒で取るぐらいが相場な命令

・1738b
1. 特定の条件下で@EVENTSHOPからBEGINを行うと例外が発生するのを修正
　　簡単に例外再現できるエラーなのでクリティカルにも程ががが
2. 式中関数版のCHKDATAを実装
3. CSTR.CSVの要素指定がCharaXXX.CSVで使えないのを修正
4. CSVCSTRが使い方によってはエラーを誘発するのを修正
5. 代入行でLOCAL　= 1のように全角スペースが入ってる場合のエラー表示の改善

・1738a
1. WAIT系の処理でボタンの世代が進んでしまうのを修正
　　昔の処理ではWAITでは進まないのが正しいはず
2. CSTRを文字列要素指定に対応
　　CSTR.CSVで定義しますが、あくまでもこっち他の数値配列の文字列指定と同様に配列要素の数字との対応を定義します。
　　間違っても、STR.CSVのように中身を指定するものではありません。（中身はCharaXX.CSVで定義）
　　間違って勘違いして、うまく動かないというのは完全に自己責任ですので、こちらでは対応しません、あしからず
3. SELECTCASE構文のエラーハンドリング強化
　　CASE分岐の外に命令が存在している場合警告を表示
4. 文字列置換命令REPLACE実装
　書式：REPLACE(<置換対象文字列>, <置換対象パターン>, <置換後の文字列>)
　内容：置換対象文字列を置換対象パターンで検索し、ヒットしたら置換後の文字列で置き換える
　　内部処理は思いっきり正規表現です。第２引数はC#の正規表現の仕様に準じて動作します。
　　そのため、()や[]、$、/.*+等の正規表現で用いられる記号はエスケープ必須となります
5. 関数に対して#〜が複数定義されたときのパース処理の仕様を調整
　　#FUNCTION、#FUNCTIONSが同時に定義された等をきちんと警告処理に
6. 関数定義のARG、ARGSに初期値を指定できるように拡張
　　<関数名>, ARG = 1, ARGS = "A"
　　指定可能な初期値は定数および定文字列のみ
　　ARG、ARGS以外には指定不可
　　また、引数省略の呼び出し時に、ARG、ARGS以外も初期化されてしまうのをしないように変更
7. 画面サイズの取得が正しい値を返さないのを修正
8. 表示関係無視フラグを無視する区間を指定できるNOSKIP〜ENDNOSKIP実装
　　この2つで囲った区間はSKIPDISP 1の状態でも表示等される
　　主にINPUTが必要な場合に使用するとよい
　　また、この命令はSKIPDISPの状態に影響しないので、
　　SKIPDISPフラグが立ちうる環境下のコード（例えば表示/非表示のある口上関係）では
　　これを使うと、絶対に表示する必要がある場所をきちんと表示できるようになります
9. PRINT等の画面出力命令およびWAIT、TWAITなどの命令を無視するフラグを設定する命令SKIPDISP追加
　書式：SKIPDISP <数値>
　引数：0 　　無視しないようにする
　　　　0以外 無視するようにする
　内容：このフラグを立てると、PRINT等の出力が一切行われなくなる
　　　　また、このフラグが立ってる間にINPUTおよびINPUTSに達した場合は
　　　　ユーザーが何をすればいい知る術がないこと、また飛ばせば無限ループに入る可能性が高いため
　　　　警告文と対処法を明示した上でエラーになるようにしてあります
　　今一般に使われる口上の実装では口上の非表示が可能な場合、
　　表示と非表示でコマンドの結果が変わったり、動作が変わってしまう場合がある
　　そこで、これを立てた上で口上を呼び出せば、表示はされることなくそれ以外の処理が行われるため
　　表示/非表示で同じ動作を期待できる
　　INPUT/INPUTSがかぶる場合は上のNOSKIP〜ENDNOSKIPで囲んだり、
　　SKIPDISP 0しておいて、INPUT処理後に再度SKIPDISP 1するなりの対策があります（一応前者推奨）
　　ちなみに今無視するフラグが立ってるかはISSKIP()式中関数で取得できます
10. ログ出力命令OUTPUTLOG実装
　　やり過ぎはディスクの寿命を縮めるのでほどほどに

・1736j
1. 文字列演算に剰余演算子を用いると正しく動作しないのを修正
　　なんであんな処理になってんだか
2. Configに起動時にウィンドウを最大化するを追加
3. TINPUT系の時間切れ関係の表示をカスタマイズ可能に
　　_Replace.csvで「時間切れ表示」で設定可能
4. _Rename.csvの置換対象文字列に「,」を使えるように変更
　　　CALL TEST\, LOCAL\, LOCAL:1 , テスト
　　とすれば、
　　　[[テスト]]はCALL TEST, LOCAL, LOCAL:1と置換されます
5. _Rename.csvの仕様に一部制限を策定
　　　RAWLIN, テスト
　　　D[[テスト]]E
　　や
　　　F LOCAL == 1, あ
      SI[[あ]]
　　のように、_Rename.csvを文法破壊に使えてしまうため、
　　命令を含む文字列は1行丸々の置換以外ではエラーになるように変更
　　つまり、
　　　PRINTL テスト, 表示
　　　[[表示]]
　　はOK
　　[[〜]]の後ろにさらに引数等を追加した場合はエラーになります
　　変数の一部置換等はチェックしようがないため今まで通りの動作となります
6. 構文中に全角スペースが含まれる場合を明確に例外に
　　1736hの時に一緒に実装しておけばよかったが忘れてた

・1736i
1. CVARSETが正しく動作しないバグを修正
　　はいはいtypo、typo('A`)
2. 文字列中の指定部分文字列の数を取得する命令STRCOUNT追加
　書式：STRCOUNT <検索対象文字列>, <検索文字列>
        STRCOUNT(<検索対象文字列>, <検索文字列>)
　　返り値、ヒットした数
　　ちなみに内部的には正規表現処理なので、検索文字列の書式はC#の正規表現の仕様に準じる
3. GETTIMESの時間の書式が昔のままになっていたのを修正
　　ただのｲﾝﾌﾟﾘ漏れ

・1736h
1. 全角スペースを読み飛ばす仕様になっている部分があまりにも多すぎて、コードの互換性壊れまくりだったのを修正
　　eramakerではエラーになる構文中の文字列以外での空白等が無視ドスルーされまくりなど
　　eramaker構文のみなにもEmueraでは動かないコードが大量発生しえたという恐ろしいバグ
2. CLEARLINEやFONTSTYLE、TINPUT系の第1引数に直接負の値を指定場合は警告を出すように変更
3. CALLFORM系が一切使われていないコードでTRYCALLLISTから呼び出されるだけの関数がエラーを誘発する場合があるのを修正
　　相当レアなケースだが、この条件だと該当関数が呼び出されない扱いになる
4. TIMES関数の第1引数に前置演算子のついた変数を渡した場合に投げる例外を変更
　　書式不正に伴う、内部処理での例外なので、ユーザーにはわけわかめなため、
　　書式不正であることを明確にした
5. GOTOで直接REPEAT〜REND、FOR〜NEXT構文の中に入るとループ末端で例外を投げるのを修正
　　eramakerではREPEATを経由せずにRENDに到達した場合は無視されるので、これにあわせた
　　WHILE〜WENDとDO〜LOOPは問題なくループします
6. 一部数値変数と文字列変数の配列要素数を同期するように変更
　　CSVで設定できる〜NAME系文字列変数とそれに対応する数値変数の配列要素数の設定を
　　一方のみ指定すれば両方同じ要素数になるように変更
7. TCVARをcsvによる文字列要素指定に対応
　　変数TCVARNAME追加
8. 文字列三項演算子で処理される文字列の先頭と最後の\nが無視される問題を修正
9. macro.txtの挙動に関する変更
　　macro.txtがない状態でマクロが全て空の場合、macro.txtを生成しないように変更
　　マクロが読み込み時からEmuera上で変更されてない場合は終了時にmacro.txtを更新しないように変更
10. 三項演算子中で""中の#を区切り演算子として認識しないように修正
　　生で使う場合は相変わらずエスケープ必須です
11. 1のエンバグ修正

・1736g
1. 空行判定式中関数LINEISEMPTY()追加
　　この関数を呼び出した時点で、PRINTL の結果がただの空行になる場合には1が、そうでなければ0が返る
　　PRINTC系で条件に応じたボタンを書き連ねる場合に、最後にこれを見れば、
　　表示されるボタンがあるかないかを判別し、なければ専用の表示をするとかも変数を使わずに容易に可能
2. CALLF系が式中関係で使えなかったのを修正
　　CALL系なのでダメに見えるが、単に式中関数を処理するだけなので、問題なく使える
3. ログ出力でファイル名の指定が無視されるのを修正
4. 1736fの挙動変更のエンバグを修正
　　クリティカルではないリグレッションでした

・1736f
1. 一時変数のキャラ変数版TCVAR追加
　　基本的な動作はTFLAGと同じ、違いはキャラ変数であることのみ
2. ボタン周りの処理仕様を大幅に手入れ
　　ログ内の使えるボタンを拾えるように改造
　　ホイールスクロール時にボタンを判定するように変更
3. インプットマクロの処理のバグがregressionしていたのを修正
　　よくある話
4. ホイールやpageDown(Up)でのスクロール周りの処理で不必要な表示処理呼び出しが起こらないように修正
5. PRINT系文字列で先頭が\nだと表示がおかしくなるのを修正
　　相当昔から存在していたバグ、もちろん今まで見つからなかったのは誰も普通こんなことしないから
6. 変数の引数に直接式中関数を渡すとパースでエラーになるのを修正
　　何かしらの演算をする場合はもちろん()でくくる必要があります
7. システムデフォルトのタイトル画面で式中関数を呼び出すデバッグコードが正常に動作しないのを修正
　　ここらへんは式中関数の動作仕様の絡みだった
8. 式中関数を返り値無視で呼び出す命令CALLF、CALLFORMF実装
　書式：CALLF 関数名, 引数1, ....
　　　　（式中関数ですが、普通の関数の引数書式で呼び出してください）
　内容：式中関数を通常の関数扱いで呼び出す、返り値は破棄される
　　疑似SETTERを作りたくてやった、今は反省している
9. VARSET, CVARSETの配列範囲指定を可能に
　書式：VARSET <変数>, <値>, <配列範囲初値>、<配列範囲終値+1>
10. 前置インクリメント行の後ろに余計なコードが付いても警告にならないのを修正
　　これは本来ありえないコード
11. 雑多なバグ修正
12. プロジェクトをVC#2010用にコンバート

・1736e
1. SWAPの対象変数の引数にRANDが入るとおかしいことになるのを修正
　　これはあまりにもほどいバグだった
2. 1736dでの無限ループ判定強化が不完全なのを修正
　　条件次第では一切判定に飛ばない場合があった

・1736d
1. Win9XでWINAPI描画が正常に動作しないのを修正
　　Win9XのUnicodeサポートの貧弱さは地獄だぜ(ry
2. 高速化の煽りで無限ループ判定の頻度が落ちまくりだったので以前とほぼ同頻度になるように修正
3. VARSIZEの返り値が三重配列変数の場合おかしいを修正

・1736c
1. バグ修正
　　@EVENTSHOP中のBEGINがエラーになっているのを修正
　　（ここでのBEGINは動作すべき）
　　（@SHOWSHOPでのBEGINは動作が極めて不自然なため対応予定なし）
　　TOINTの処理が直ってなかったのを修正

・1736b
1. バグ修正
　　ARRAY関係命令のエラー判定処理修正
　　TOINTが符号付きの場合に正しく処理しないのを修正
　　CUP、CDOWNがUP、DOWNと同時に初期化されないのを修正
2. 数学関数を式中関数として追加
　　CBRT（三重根）
　　LOG（自然関数）
　　LOG10(常用対数）
　　EXPONENT（指数関数）
　　書式は全部：関数名(引数)
3. GETTIME関係の微調整
　　書式をロケールデフォルト（ja-JPの場合yyyy/MM/dd H:mm:ss）→yyyy/MM/dd HH:mm:ssに変更

・1736a
1. 最近追加した式中関数のバグ修正
　　案の定、色々悲しいことになっていた
　　ついでにコードのリファクタリング、若干実行ファイルサイズを削減
2. EXISTCSVの第2引数が無意味になっていたのを修正
3. SPLIT命令実行時RESULTにSPLITで処理された文字列の分割数を返すように変更
　　分割後の処理がしやすいように

・1735a
1. MATCH、MAXARRAY、MINARRAYでキャラクタ変数が使えてないのを修正
2. SUMARRAY、MATCH、MAXARRAY、MINARRAYのキャラクタ回し版を追加
　　　SUMCARRAY
　　　CMATCH
　　　MAXCARRAY
　　　MINCARRAY
　　書式は元の関数と同じ
3. GDIでタブ表示が有効になるように修正
　　パフォーマンスが落ちる場合にはバックアウトの可能性有り

・1734t
1. 配列の値の総和を取るSUMARRAY関数追加
　書式：SUMARRAY(<対象となる配列変数>{, <開始位置>, <終了位置>})
　内容：開始位置<=i<終了位置の配列の値の和を取得する
　　　　開始位置、終了位置を省略すれば全体の和となる
　　　　○注意
　　　　　キャラクタ配列を指定するときの注意点
　　　　　　　SUMARRAY(CFLAG:2)
　　　　　とすると、キャラ位置2のキャラのCFLAGの和ではなく、
　　　　　TARGETのキャラのCFLAGの和をとる
　　　　　これはキャラ配列変数の指定方法に関する仕様のためであるため注意が必要
2. 任意の1次元配列中に指定した数値or文字列を含む要素がいくつあるか数え上げるMATCH関数追加
　書式：MATCH(<対象となる配列変数>, <検索する数値or文字列>{, <開始位置>, <終了位置>})
　内容：開始位置<=i<終了位置の配列の中に指定したものがいくつ含まれるか数え上げて返す
　　　　開始位置、終了位置を省略すれば全体からの検索となる
　　　　○注意
　　　　　二重配列、三重配列には使えません
　　　　　また、キャラクタ変数に使った場合には<変数>:<キャラ位置>:XのXの中からMATCHします
　　　　　キャラ位置を回す命令は必要であれば別途用意します
3. 任意の数値1次元配列中の最大・最小値を取得するMAXARRAY、MINARRAY追加
　書式：MAXARRAY or MINARRAY(<対象となる配列変数>{, <開始位置>, <終了位置>})
　内容：開始位置<=i<終了位置の配列の中の値の最大値or最小値を返す
　　　　開始位置、終了位置を省略すれば全体からの検索となる
　　　　○注意
　　　　　二重配列、三重配列には使えません
　　　　　また、キャラクタ変数に使った場合には<変数>:<キャラ位置>:XのXの中からMATCHします
　　　　　キャラ位置を回す命令は必要であれば別途用意します
4. GETPALAMLVを式中関数化、EXPLV版のGETEXPLV追加
　　引数の仕様は以前と同じ
5. FORM構文でalignment要素を指定した文字列三項演算子を含まない%〜%と三項演算子が共存する場合にエラーになるのを修正
6. SORTCHARA命令で文字列変数を指定したときに、その変数が未定義のキャラがいた場合例外を吐くのを修正
7. PageUp、PageDownキーに対応
　　10行のスクロールに相当
8. BEGINコマンドおよびRESETDATA時にスタイル指定もリセットするように変更
9. システム関数に#FUNCTION(S)を指定した場合、エラーとするよう変更

・1734s
1. ユーザー関数名に変数名および命令の予約語を使えないように変更
　　なんで、そうなっていなかったかというのは自分に聞かれてもちょっと困る

・1734r
1. 表示処理におけるひらがな・カタカナ相互変換系を実装
　命令：FORCEKANA <0〜3>
　　　　　0:変換を行わない
　　　　　1:ひらがな→カタカナ
　　　　　2:カタカナ→ひらがな（全角のみ）
　　　　　3:カタカナ→ひらがな（全角・半角両方とも）
　内容：フラグの数値で指定した変換系を使用する命令
　　　　命令は以下にしめすPRINTK系命令27種にのみ影響
　　　　（それぞれKを抜いたPRINT系命令と同等の命令）
        PRINTK
        PRINTKL
        PRINTKW
        PRINTVK
        PRINTVKL
        PRINTVKW
        PRINTSK
        PRINTSKL
        PRINTSKW
        PRINTFORMK
        PRINTFORMKL
        PRINTFORMKW
        PRINTFORMSK
        PRINTFORMSKL
        PRINTFORMSKW
        PRINTCK
        PRINTLCK
        PRINTFORMCK
        PRINTFORMLCK
        PRINTSINGLEK
        PRINTSINGLEVK
        PRINTSINGLESK
        PRINTSINGLEFORMK
        PRINTSINGLEFORMSK
        PRINTDATAK
        PRINTDATAKL
        PRINTDATAKW
　FORCEKANAで変換指定をするとPRINTK系命令の文字列は指定した変換をされた上で出力される

・1734q
1. DO〜LOOP内でCONTINUEが動作してないのを修正
　　DO〜LOOP内のCONTINUEはLOOPの条件判定を満たしてなければLOOPを抜けるのは仕様です
　　（ほとんどの主要言語がこの仕様なのでそれにあわせてあります）
2. 存在する全てのキャラクタについて、キャラクタ変数の特定配列要素への代入を行う命令CVARSET実装
　書式：CVARSET <代入先キャラクタ変数>, <代入先配列要素>, <代入する値>
　内容：<変数>:xx:<代入先配列要素>について、全ての存在するキャラについて<代入する値>を代入する
　　　　<代入先配列要素>には文字列による指定も使用可能
　　　　<代入先配列要素>は変数がNAME等非配列変数の場合にはどんな値を入れても無視されます
　　　　<代入する値>を省略した場合は整数なら0、文字列なら空文字列が代入されます
　　　　<代入する値>を省略している場合は<代入先配列要素>も省略可
　　　　この場合は<変数>:xx:0について処理が行われます。
　　　　なお、<代入先配列要素>と<代入する値>に文字列を指定する場合は""で囲む必要があります。
　　　　同様にFORM構文を使う場合には@""で囲んでください
3. 微調整
　　入力フィールドの高さをフォントサイズではなく行高さにあわせるように変更

・1734p
1. エンバグ修正
　○TRYCALLLIST実行後にエラーになるのを修正（1734iでのエンバグ）
　○RAND()の第2引数判定にまだバグが残っていたのを修正（1734oの修正によってバグが発現）

・1734o
1. 雑多な修正
　○CUP、CDOWNを文字列による添え字処理に対応
　○コンフィグでウィンドウサイズを変更後、再起動コマンドから再起動すると設定が反映されないのを修正
　○TOSTR()、RAND()の第二引数の判定処理が正しく動作しないのを修正
　○PRINT系命令で文字列中に'\n'を含む場合表示が正しくならないのを修正

・1734n
1. 雑多なバグ修正
　○16進数が処理できなくなっていたのを修正
　○デバッグコードでいかさま化処理に行かないのを修正
2. PALAMLV自動判定命令GETPALAMLV追加
　書式：GETPALAMLV <数値・変数>, <判定するLVの上限>
　内容：与えられた値の内容とPALAMLVを比較し、
　　　　その変数がPALAMLVでどこまで以上かをRESULTに返す
　　　　判定の上限LVは第2引数に設定可能
　　　　PALAMLVの値を設定していなくても指定可能なので注意

・1734m
1. TOINTのバグ修正
　　最初が非数字の文字列を渡すと例外吐くのを修正
2. 連続コマンド実行周りのバグ修正
　　連続コマンド中にBEGIN SHOPすると挙動がおかしくなるのを修正

・1734l
1. 1734i〜jのエンバグ修正
　　REPEAT、FORの挙動で一部変わってしまっていた部分があったので修正
2. クリップボードダイアログの挙動変更
　　どう見てもDockしていません、本当に(ry

・1734k
1. 1734i〜jのエンバグ修正
　　デバッグコマンドで代入および一部命令が使えなくなっていたのを修正
2. ERBチェッカーモードにおける警告表示が設定ファイルに引きずられていたのを修正
　　目的上、eramaker互換性に絡む場合を除いて全ての警告LVの警告を表示する方がよいが
　　コードのミスでそうなっていなかった

・1734j
1. スクリプトエンジンの改善
　○SIF、IF〜ELSEIF〜ELSE〜ENDIF、SELECTCASE〜CASE〜CASEELSE〜ENDSELECTを優先処理へ
　○通常のスクリプト駆動エンジン自体を改善（なるべく関数スタックを出し入れせずに駆動）
2. eramaker互換性に関するLV0警告を追加

・1734i
1. スクリプトエンジンの改善
　○SET、SETSを優先処理することでコード処理を全体的に高速化
　○フロー処理駆動系を改良、全体的に高速化
2. ログが保存できなくなっていたのを修正

・1734h
1. 文字列変換関数TOUPPER、TOLOWER、TOHALF、TOFULL実装
　書式：TOUPPER(<文字列>)
　　　　TOLOWER(<文字列>)
　　　　TOHALF(<文字列>)
　　　　TOFULL(<文字列>)
　内容：TOUPPER：文字列のアルファベットを大文字にする
　　　　TOLOWER：文字列のアルファベットを小文字にする
　　　　TOHALF：文字列の全角文字のうち半角文字にも存在する物を半角文字にする
　　　　TOUPPER：文字列の半角文字を全角文字にする
2. 特定の書式を伴った場合の警告追加
　　LV0：比較演算子(==, !=, <>, >, <, >=, <=)が連続した場合に警告表示
3. 細かいバグ修正
　　DRAWLINEに太字スタイルが適用されてしまうバグ修正
　　1734gのエラーの表示法を修正（あれだと何が問題かわかりにくいので）
4. (バリアント・パッチ・口上作者向け)eramaker互換性関係の警告の表示の有無を設定可能に
　　Emuera専用バリアントであれば必要ない警告なので設定側で切れるように
　　　書式： eramaker互換性に関する警告を表示する:YES or NO

・1734g
1. (重要更新)命令行のパースについて致命的な問題があったので修正
　　eramakerでは(命令) (引数等)か(命令)	(引数等)のように
　　命令の後ろに半角スペースorタブを入れる必要があるが、
　　特に(命令)=(引数)のように、半角スペースのところに記号もしくは全角スペースを入れると、
　　その行自体が無効な行として扱われる
　　ところがEmueraはこのような無効な行についても、正しく処理できず
　　PRINT=1に対して1を出力してしまう（他の命令でも同様の問題がある）
　　そのため、この修正で(命令) (引数等)か(命令)	(引数等)以外の書式はエラーとなるようにした

・1734f
1. 一時用文字列変数TSTR追加
　　TFLAGのSTR版それ以上でもそれ以下でもない
2. GETCHARAの仕様変更
　書式：GETCHARA <検索対象NO>, (<0 or 0以外>)省略可
　内容：検索対象NOをNOに持つキャラが所持してるキャラの中にいるか検索する
　　　　いればその位置を、いなければ-1を返す。
　　　　(New!)第2引数（省略可）に検索対象の範囲を設定できる
　　　　　　　0なら非SPキャラのみ、0以外なら非SP・SPキャラ両方を検索する
　　　　（後者はGETCHARAとGETSPCHARAを同時に行う、とにかくそのNOを有するキャラがいるかの検索用）
　　　　非SPとSPが両方ともいる場合は非SPキャラの位置を返します
　　　　第2引数を省略すれば0と見なされますので、旧来の用途で使えます

・1734e
1. 1734bのエンバグ修正
　　ほう、FORWARDが6文字とな…もうねバナナとアボカド

・1734d
1. 一部命令の設定ミス修正
　　一部の入力待ちPRINT命令の設定をミスっていた
　　誰も使ってないから今まで問題が出なかっただけともいう
2. コードのリファクタリング
　　まさにこれだけ、もちろん実行速度に(ry
　　しかし、一部明らかに非効率な処理をしてしまってるので、これは要宿題
　　ただし、素のコードサイズは3KB減った
　　だからどうしたである

・1734c
1. 引数チェックをさらに強化
　　まだ強化できるかも…
2. ソースコードのリファクタリング
　　少し整理されて、少しだけスパゲッティでなくなった、もちろん処理が速くなるとかそんなことは起こらない
　　どこぞの誰かが言いました「リファクタリングは個人的充足感はあるが結果には結びつく変化は無いなぁ」

・1734b
1. セーブデータ数コンフィグ取得命令SAVENOS実装
　書式：SAVENOS <数値変数>
　　　　<数値変数> = SAVENOS()
　内容：コンフィグのセーブデータ数を取得
2. 命令版PRINTCPERLINEが全く使い物にならなかったのを修正

・1734a
1. 引数チェックの強化
　　特に引数が多すぎる場合の判定を強化
　　TIMESの第2変数などでは1.00Rみたいな構文も通していたので、これも修正
　　他にもあるかと思うので、見つけたら教えてください

・1732g
1. 文字列の整数値化命令TOINT実装
　書式：TOINT <数値化する文字列>
　　　　TOINT(<文字列>) (文中関数版)
　内容：引数に与えられた文字列を整数値化
　　　　数字と解釈できない文字列の場合は0を返します。
　　　　小数値は整数に換算されて返されます。
　　　　なお、"1.05e2"のような小数＋指数表記は仕様上正しく解釈できないため0が返るので注意してください
2. セーブデータのうち、オートセーブを除いた最後のインデックスのセーブデータが読み取り不可だったのを修正

・1732f
1. 文字列分割命令SPLIT実装
　書式：SPLIT (対象文字列), (区切りに使う文字列), (分割した文字列を入れる文字列配列名)
　内容：区切りに使う文字列で指定された文字列で対象文字列を区切り、複数の文字列として取り出す
　　　　　　SPLIT "あい,うえ,,お", ",", LOCALS
　　　　とすると、
　　　　LOCALS:0は"あい"、lOCALS:1は"うえ"、LOCALS:2は""（空文字列）、LOCALS:3は"お"となる
2. セーブデータ数拡張時のセーブデータ表示処理を変更
　　デフォルト設定だと表示が画面に収まらなくなりますので、その場合は画面を広げてください

・1732e
1. コンフィグで使うセーブデータ数を設定可能に
　　20〜80個の範囲で任意に変えられます
　　表示処理についてはTODOかも

・1732d
1. TRYCALLLIST系の不具合修正
　　引数を起動時にパースしない場合エラーが起こるのを修正

・1732c
1. CSVCALLNAME等の処理の不具合修正
　　未設定の場合に呼び出すと例外が発生するのを修正
　　未設定の場合は空文字列を投げるように変更

・1732b
1. UP、DOWNのキャラクタ変数版CUP、CDOWN実装

・1732a
1. 三重配列を配列要素数変更可能に
　　大きくすると簡単にメモリ食いつぶすので、合計で100万個を上限に

・1731y
1. DO〜LOOPをBREAKに対応
　　ただのインプリ忘れなんだ、うん

・1731x
1. 三重配列変数の保存に関する不具合修正

・1731w
1. 特殊関数呼び出し命令、TRYCALLLIST、TRYJUMPLIST、TRYGOTOLIST
　書式：TRYCALLLIST
　　　　　　FUNC 関数1
　　　　　　FUNC 関数2
　　　　ENDFUNC
　内容：FUNCの列挙の上から順にTRY型のCALL(JUMP、GOTO)を試みる
　　　　関数があればその時点でその関数を呼び出し、なければ次の関数の呼び出しへ移る
　　　　TRYCALLLISTでは最初に見つかった関数をCALLし、呼び出した関数から戻ってきたらENDFUNC行へ飛ぶ
　　　　結果、複数の関数の候補の内、存在する最初のものだけが呼び出される
2. コードの一部再読み込みについての処理の問題修正
　　ファイルの再読み込み時の関数リストの処理に問題があり、特定条件で例外が発生するのを修正
3. 一部コードについてのエラーハンドリング超強化
　　結構問題があったのを修正

・1731v
1. 1731rのエンバグ修正
　　CALLTRAINENDがないとNullReferenceException吐くのを修正

・1731u
1. LOSEBASEのキャラ変数版DOWNBASE追加
　　LOSEBASEのキャラ変数版、それ以外の何者でもない

・1731t
1. ERB読み込み時点におけるエラーに対する処理を改良
　　エラー位置の情報を表示するように
　　また、"\"で始まる行などの場合は例外処理によって読み込み処理が打ち切られてしまうのを
　　打ち切られないように修正
　　ただし、読み込み時点でのエラー（行そのものが解釈不可能な場合）があった場合は
　　解析終了後にタイトルに移行せずにログを出力してEmueraを終了するように変更
2. 関数名にちゃっかり";"が使えちゃってたのを修正
　　使えても問題ないといえばないが、"_"以外はダメというEmueraでの仕様にあわせて修正

・1731s
1. 文字列三項演算子の処理の調整
　　\#や\{、\%の扱いに問題があったのを修正

・1731r
1. CALLTRAINによるコマンド自動実行の仕様調整
　　今までは飛ばしていたSHOW_STATUS、SHOW_USERCOMも呼び出すように変更
　　（ここで設定した変数にコマンドの実行結果等が影響する場合におかしくなるため）
2. CALLTRAINによる自動実行終了後に対応したイベント関数CALLTRAINEND追加
　　CALLTRAINによる自動実行が終了後、
　　システム内部から自動的に呼び出される
　　CALLTRAIN用に用意したフラグ等のリセットなどに使ってください
　　BEGIN等で抜けた場合でもPRINT系命令を無視する形で実行されますので
　　BEGINしたのでフラグが残って…という事故も防げてるはずです
　　なお、DOTRAINで抜けた場合のみ呼び出されませんので注意してください

・1731p
1. ユニコード処理での文字列分割処理SUBSTRINGU実装
　書式：SUBSTRINGU ( (文字列）, (開始位置), (長さ) )
　内容：SUBSTRINGと同じ、違うのは全角文字も1文字としてカウントするところ
2. Configで文字列サイズよりも行の高さが小さい場合の補正処理追加
　　手書き書き換えだとできちゃうのよね、これ

・1731p
1. PRINTCでかなりやばげな処理ミスしてたので修正
　　DISPOSEしてない…だと…orz
　　これはほどいリソース食いつぶし祭り…

・1731o
1. STRLEN、STRLENFORMに対応するユニコード文字列長取得命令STRLENU、STRLENFORMU追加
　書式：STRLENU （文字列）
　　　　STRLENFORMU （FORM構文）
　内容：文字列長をユニコードとして取得
　　STRLENSUしかなかったので追加
　　通常のSTRLEN等と違うのはユニコードでは漢字も1文字でカウントするところ。
2. 文字列三項演算子の返り値の中に{数値変数}および%文字列変数%を使った時にエラーチェックができてないのを修正
　　エラーチェックに重要だが実装できてなかった

・1731n
1. （内部処理変更）PictureBoxのPixelFormatをFormat32bppArgbからFormat32bppPArgbに変更
　　これだけでGDI+使用時の描画速度がおよそ5〜10%高速化しちゃったのよね
　　「C#のグラフィックは複雑怪奇なる謎仕様を生じた」（元ネタわかる人いるかのぉ…）
　　Tips：主にGDIの描画に難のある最近のRadeonHD系を使ってる人にはGDI+＋イメージバッファ使用にするとよい
　　（少なくとも手元ではGDI系描写より速いという結果が得られている、まあクロック固定やったらGDIの方が速くなりそうだが）

・1731m
1. 全ての変数が初期値(0と"")のキャラを追加するADDVOIDCHARA実装
　　CSVなしでランダムキャラを作りたいときには使える…かも知れない

・1731l
1. _replace.csvとmacro.txtが特定の条件の時に起動時にフリーズする可能性があるのを修正
　　文字列のハンドリングのバグでした

・1731k
1. 文字列による配列要素指定のエラーが起動時引数チェックでキャッチできない場合があるエラーを修正
　　完全に既存の仕様のミス
　　他の変数用のcsvに書かれている文字列もチェックしているため事故が起こりえた
2. 構文チェッカモードでもキャラデータを読み込むように修正
　　キャラ名を引数に使った時にエラーをはいてしまうため

・1731j
1. _Replace.csvで汚れの初期値を設定できるように変更
　書式：汚れの初期値, (初期値の値の羅列を'/'で区切った物)
　　例：汚れの初期値, 0/0/2/1/8
2. 汚れを初期化する命令RESET_STAIN実装
　書式：RESET_STAIN (リセットするキャラ位置)

・1731i
1. キーボード入力において特定の条件で例外が発生するのを修正

・1731h
1. GDI時に太字とPRINTC系の組み合わせ等で表示がずれるのを大まかにだけ修正
　　仕様上完全に修正するのは困難でございます
　　ついでに普通のPRINT系で表示がずれてしまうのはぶっちゃけどうしようもない
　　GDI+の場合は太字にするとそもそも正確な文字列の幅の取得自体無理ゲーなのでずれるのはどうしようもない
2. 1731gでのChara*.CSVからのファイル番号読み取り処理をいじってみる
　　Chara**abc.csvみたいな書式にも対応できるようにした

・1731g
1. タイトル部分でのキャラ追加処理の仕様をeramakerにあわせた
　　うん、やる必要ないって言っちゃったけどやったらあっさりできたんでやっちゃった
2. ゲーム開始時のシステム的なキャラ追加処理を行う命令"ADDDEFCHARA"追加
　　1.の処理をERBで再現するのが困難なため実装
　　@SYSTEM_TITLEを使いたい時にどうぞというか、@SYSTEM_TITLE内でしか使えません
3. 1731fでのFORM構文の桁数処理での処理を少し改善
　　特殊な場合にエラーが出るような処理だったのを出ないように処理

・1731f
1. FORM構文の桁数指定を変数、数式、三項演算子、文中関数に対応
2. 1731d以降でISもしくはTOを含むCASE文に","があるとエラーになるのを修正

・1731e
1. 1731dでの修正でのエラーハンドリング強化

・1731d
1. コードのパース処理にクリティカルなバグがあったのを修正
　　ある程度のバリアントで動作確認はしてますが、これに伴い正しい一部のコードがパースできなくなっている可能性があります
　　そういう例を発見した場合はbbspinkのeraシリーズスレもしくは東方ウフフ板のeratohoスレ
　　または、irc2chの&eramakerチャンネルまで報告願います
　　（他のera関係のスレ等は基本見てないので報告されても捕捉できない可能性が高いです）

・1731c
1. 簡易ファイルチェッカ機能をフォルダに対応
2. キーマクロ機能のON・OFFをコンフィグに実装
　　OFFの場合にはキーマクロが使えない＋macro.txtの読み書きがなくなります

・1731b
1. ファイル再読み込み・フォルダ再読み込み時の新規ファイルの取り扱いをきちんと処理
　　これで新しいファイルの読み込みも問題なく行われるはず

・1731a
1. CharaXX.csvをEQUIPおよびJUELに対応
　　JUELは「JUEL」もしくは「珠」、EQUIPは「EQUIP」をコードに使います
　　同時に該当値をCSVから参照できるCSVEQUIP、CSVJUELを追加

・1730a
1. 入力履歴の処理でまだ完全に一致していなかったのを修正
　　これで大丈夫だと信じたいがダメだったらEmuの人が(ry

・1729j
1. 変数の配列要素確認でのエラーハンドリングの抜けを修正

・1729i
1. フォルダ単位のERB再読み込み実装
　　事故ってもEmueraの人がきっと直してくれるよ！よ！

・1729h
1. 全てのキャラクターを削除するDELALLCHARA実装
　　書いての通り、主人・奴隷含めて全てのキャラクタを削除する
2. マクロの*が複数あるときの処理がおかしいのを修正
　　まあ、よくある事故です

・1729g
1. 文字列についての*=で処理が正しくない部分を修正
　　%%内だと通る一部の構文が*=で通らないのを修正

・1729f
1. インクリメント・デクリメントのパース処理に問題があったのを修正

・1729e
1. 1728eの追加処理で特定条件で無限ループにはまるのを修正

・1729d
1. 文字列処理に複合演算子導入
　　書式：LOCALS += "あ" + STR:1
　　　内部的には
　　　　LOCALS = %LOCALS + "あ" + STR:1%
　　　と解釈される（文字を使う場合は" "必須）
　　　　　LOCALS *= 2
　　　内部的には
　　　　　LOCALS = %LOCALS * 2%
　　　と解釈される（変数可）

・1729c
1. セーブ失敗を例外終了にしないように変更
　　オートセーブ失敗で…とか切なすぎるよね

・1729b
1. JUMPで関数スコープが移動せず、LOCAL系の処理がおかしくなるのを修正
2. キーボード履歴関係のさらなる調整

・1729a
1. キーボード入力履歴の処理をeramakerの仕様にあわせた
2. 細々した処理調整（体感では完全に誤差レベルな速度上昇）

・1728m
1. 簡易ERBチェッカ機能Ver0.02に更新
　　機能を強化＋処理を改善

・1728l
1. ファイルのドロップによる簡易ERBチェッカ機能Ver0.01追加
　　使い方：チェックしたいERBファイルをEmueraにドロップしてください
　　　　　　なお、CSVファイルをきちんとチェックした上で引数チェックするので、
　　　　　　（文字による配列要素指定対応のため）
　　　　　　作成したファイルを動作させるバリアント上でチェックしてください

・1728k
1. PRINTD系命令の改行処理を追加し忘れていたので追加

・1728j
1. 書式指定のFORM構文の処理でミスがあったのを修正
　　処理中にFORM構文の内部変数の長さが変わるとエラー落ちする場合があったのを修正
2. GAMEBASE.CSVのバージョン読み取りに関する互換性の修正
　　文字が入るとバージョン情報保持しない問題の修正

・1728i
1. 3次元配列実装
　　メモリを大量に消費する関係上、あんまり大量には用意できないので
　　　TA、TB（ともに100×100×100）のみ
　　後、現状はサイズ変更不可（サイズを増やすと簡単にOutOfMemory吐きかねないので）
2. 起動時のファイル読み込みの処理の問題修正
　　不必要な拡張子のファイルまで読んでいたのを直した

・1728h
1. SETCOLORでの色指定無視のPRINT系命令27個追加
　　増えたのは以下の通り
        PRINTD
        PRINTDL
        PRINTDW
        PRINTVD
        PRINTVDL
        PRINTVDW
        PRINTSD
        PRINTSDL
        PRINTSDW
        PRINTFORMD
        PRINTFORMDL
        PRINTFORMDW
        PRINTFORMSD
        PRINTFORMSDL
        PRINTFORMSDW
        PRINTCD
        PRINTLCD
        PRINTFORMCD
        PRINTFORMLCD
        PRINTSINGLED
        PRINTSINGLEVD
        PRINTSINGLESD
        PRINTSINGLEFORMD
        PRINTSINGLEFORMSD
        PRINTDATAD
        PRINTDATADL
        PRINTDATADW
　　この命令を使って出力した文章はSETCOLORによる色指定を無視してデフォルトの文字色で出力されます

・1728g
1. 1728eによって生じた引数パースのバグを修正
　　色々やらかしてました

・1728f
1. 特定ビット操作命令CLEARBIT、INVERTBIT追加
　書式：CLEARBIT (変数), (ビット位置)
　内容：指定した位置のBitを0に変更
　　　　ビット位置は0〜63まで
　　　　2^(ビット位置)の値に相当するBitを0にする
　書式：INVERTBIT (変数), (ビット位置)
　内容：指定した位置のBitを反転（0→1、1→0）
　　　　ビット位置は0〜63まで
　　　　2^(ビット位置)の値に相当するBitのみを反転する
　　これらも主に大規模なフラグ処理向け

・1728e
1. %〜%に内での文字列演算に三項演算子を使えるようにした
　　例えば、
　　　　LOCALS = %\@A == 1 ? TEST # T\@ + "あ" * 5%
　　みたいな構文も作れる
　　注意点：この方法で三項演算子と"\"を組み合わせるときは
　　　　　　通常の"\\"ではなく"\\\\"を用いてください（三項演算子の処理絡みから来る仕様）

・1728d
1. 特定ビットセット演算子SETBIT追加
　書式：SETBIT (変数), (ビット位置)
　内容：指定した位置のBitを1に変更
　　　　ビット位置は0〜63まで
　　　　2^(ビット位置)の値に相当するBitを1にする
　　主に大規模なフラグ処理向け

・1728c
1. 1728bの処理で\eの存在が抜けていたので修正
2. コンフィグダイアログでカラーボックスのまわりにボーダー表示

・1728b
1. 数値入力に対するマクロ構文拡張
　追加書式：(マクロ)*繰り返し回数 (後ろにマクロの続きを書くときは要半角スペース)
　　　　例：(1\r\n2\r\n)*10
　内容：()内のマクロを指定回数繰り返す

・1728a
1. 対応するキャラCSVの存在をチェックする関数EXISTCSV追加
　書式：EXISTCSV (キャラ番号, SP判定[0：通常キャラ、それ以外：SP])
　内容：対応するCharaXX.CSVがあれば1なければ0を返す

・1727u
1. （重要修正）Emueraとeramakerの仕様の相違を修正
　　SOURCEのリセットタイミングが異なっていたのを修正
　　（eratohoReverseが正常に動作しない現象の修正）

・1727t
1. コピペ関係の仕様調整
　　入力部分のテキストを選択している時はそこから直コピー
2. ショートカットキーの機能強化
　　Shift＋F1〜F12で現在の入力を保存
　　F1〜F12で保存された入力を打ち込み（誤入力による事故防止のため自動的に実行はしません）

・1727s
1. キャラクタデータのCSVからの読み取り関数大幅追加
　　追加分：CSVNICKNAME
　　　　　　CSVMASTERNAME
　　　以上の書式はCSVNAME、CSVCALLNAMEと同じ
　　　　　　CSVCSTR
　　　　　　CSVBASE
　　　　　　CSVABL
　　　　　　CSVMARK
　　　　　　CSVEXP
　　　　　　CSVRELATION
　　　　　　CSVTALENT
　　　　　　CSVCFLAG
　　　書式：関数名(キャラ番号、配列位置、SP判定[0：通常キャラ、それ以外：SP])
　　　内容：それぞれの関数に対応したパラメータをCSVデータから取り出す

・1727r
1. 指定ファイル再読み込み後の関数リストチェックで大事故が起きていたのを修正
　　変数の使い回しって怖いよね

・1727q
1. 非SJIS処理による文字列長取得関数STRLENSU追加
　書式：STRLENSU(文字列変数)
　内容：文字列変数の中身をUTFとして文字列長取得
　　　　既存の処理との一番の違いはこちらは全角文字も1文字としてカウントすることです

・1727p
1. デバッグコードで文中関数を使えない不具合修正
　　デバッグコードが動かないとかどんだけ〜

・1727o
1. コピーについて、直接コピーするのではなく、
　 表示内容を表示するテキストボックスを呼び出すように変更
　　これで好きな範囲だけを自由にコピーできます

・1727n
1. 指定ファイルのみを再読み込みする機能追加
　　口上のチェック等にどうぞ

・1727m
1. PRINTDATA系を複数行出力に対応
　書式：PRINTDATA (数値変数：省略可)
　　　　　DATA (文字)
　　　　　DATAFORM (FORM文字列)
　　　　　DATALIST
　　　　　　(DATA or DATAFORMの羅列)
　　　　　ENDLIST
　　　　ENDDATA
　内容：DATA、DATAFORMおよびDATALIST〜ENDLISTで指定した文字列を確率均一でランダムで表示
　　　　IFとRANDを使わずにランダム表示を実装可能
　　　　引数に数値変数を指定した場合は表示された変数DATAの番号が入ります
　　　　表示された文字列によって後の処理をいじりたい場合にどうぞ
　　　　DATALIST〜ENDLIST内ではDATAorDATAFORM1個が1行に相当します

・1727l
1. 単語・1行でのランダム出力用表示命令PRINTDATA系追加
　書式：PRINTDATA (数値変数：省略可)
　　　　　DATA (文字)
　　　　　DATAFORM (FORM文字列)
　　　　ENDDATA
　内容：DATAおよびDATAFORMの文字列を確率均一でランダムで表示
　　　　短い文章をIFとRANDを使わずに表示可能
　　　　引数に数値変数を指定した場合は表示された変数DATAの番号が入ります
　　　　表示された文字列によって後の処理をいじりたい場合にどうぞ
　　　　ただし、複数行対応はまだできてません

・1727k
1. ログ出力関係の仕様調整
　　出力ログファイル名のデフォルトを時間を元に設定するように変更
　　クリップボードへの出力（500行）を実装（ショートカットCtrl+C）
1. スクロールバーの仕様調整
　　スクロール量関係の調整

・1727j
1. 後置インクリメント・デクリメントに関する実装バグ修正
　　前置単項演算子の+、-、~と同時に使えなかったり、色々問題があった
2. インクリメント・デクリメントの実装の調整
　　コードサイズを若干圧縮

・1727i
1. インクリメント・デクリメントの完全実装
　　計算式の一部を簡略化できます
2. ビットシフトの実装封印解除
　　eramakerとの兼ね合いで封印されてたのを解除
※以上の処理はeramakerで100%誤動作の原因になりますので、
　Emuera専用バリアント以外では絶対に使わないでください
※eramaker用のコードで同様に++や>>が含まれている場合も正常に動作しません
　これはeramakerの演算子に関するざる仕様が原因かつ、
　そもそもコードのミスであるので、コードの作者様に修正をお願いしてください

・1727h
1. 再起動時のウィンドウ状態の保持・復元に関する諸修正
　　・再起動時に最大化・最小化状態を保持するように修正
　　・再起動時にY軸のサイズの保持値が間違っていたのを修正

・1727g
1. LIMIT関数追加
　書式：LIMIT(変数, 最小値, 最大値)
　内容：変数が最小値未満→最小値
　　　　変数が最大値より大きい→最大値
　　　　その他：変数の値をそのまま
　　　　返り値としてRETURNする関数
　　お金や体力等、最大値と最小値が決まっている変数の演算にどうぞ
2. eramakerとの挙動の細かいすりあわせ
　　スクリプトの処理等には影響はありません

・1727f
1. スクリプト実行中にエラーが発生した場合にシステムエラーに設定されたwavを再生するように変更
　　ゲーム中に特定のサウンドを鳴らすとかは実装するつもりはないので、リクエストしないでください

・1727e
1. #FUNCTION指定のユーザー関数でSELECTCASE〜ENDSELECTが使えないのを修正
　　自分で見た限りはこれが使えて何の問題ないと思いますが…

・1727d
1. スクロールで移動する行数を設定可能に(1（デフォルト）〜10行)
　　デフォルトでは遅くて遅くて困るという方向け
2. Ctrl+Bを最小化のショートカットに
　　ボスが来たボタンが欲しいと言われたので作った
　　需要があるかは正直知らね

・1727c
1. 1行あたりの表示されるPRINTC系コマンドの数の取得関数PRINTCPERLINE()追加
　　設定にあわせて表示をさせるようにしたい人向け

・1727b
1. 表示桁数指定型のFORM構文（%文字列変数, 桁数%）が複数ある場合に正しく処理が行われないのを修正

・1727a
1. DO〜LOOP構文追加
　　Cのdo〜while、VBのdo〜loop while構文と同様の処理です
2. GETNUMの対象にTRAINNAME追加
　　TALENTNAMEとかはTALENTとかで全く同じ結果がひけるので必要なしと考えてみる

・17242b
1. SELECTCASE〜CASE〜ENDSELECT構文が動作してくれないのを修正

・17242a
1. IF〜ELSEIF〜ENDIF、SELECTCASE〜CASE〜ENDSELECTの構文解釈中の問題をとりあえずアドホックに修正

・1720a
1. SystemResultに範囲外の値が入った時の処理が正しく動いてないのを修正

・1712beta001c
1. WHILE〜WENDが多重ループできない処理になっているのを修正

・1712beta001b
1. tryToInt64関数に符号を持つ値の文字列を渡すと正しく読み取れないバグ修正
2. 再起動時に画面サイズを保持して作り直すように変更
　　コンフィグは書き換えませんので注意してください

・1712beta001a
1. TINPUT系でマウスによるボタン入力ができないのを修正
2. TINPUT系で残り時間の表示がうまく処理されてないのを修正
3. FORM構文の解釈で大事故が起きているのを修正

・1711a
1. 連続コマンド実行システムのバグのさらなる修正
　特定条件を満たすと、Listのレンジ外アクセスでエラーになるのを修正
2. USERXXX系の非存在コマンド入力＋REUSELASTLINE設定時の処理についての実装変更
　ERB側でDELETELINEしなくてもよいように処理を調整

・1708beta3a
1. 連続コマンド実行システムのバグ修正
　AFTERTRAINを経ないBEGINによる状態遷移でシステムフラグの消去がなされない問題を修正
　（eratohoYMのコマンド連続実行でキャラ消滅→ロード→調教開始で連続実行の続きが自動的に行われる問題修正）

・1708beta1c
1. TRY系関数呼び出し関数仕様再拡張の仕様変更
　拡張書式：TRYC系関数呼び出し〜CATCH〜ENDCATCH
　　　　　　(TRYC系はTRY系関数と同様の関数系が用意されてます)
　内容：TRYC系の関数呼び出し時に関数が見つからなかった場合の挙動を制御
　　文法としてはIF〜ELSE〜ENDIFと同様になりました（違いは関数があった場合の処理がなくてもよいこと）
	TRYCCALL UNKNOWN_FUNC ;存在しない関数
		関数があったとき、関数処理後に行う処理（あれば、なければ省略して直CATCHでOK）
	CATCH
		関数がなかったときに行う処理
	ENDCATCH
　　なお、入れ子可能です。

・1708beta1b
1. TRY系関数呼び出し関数仕様再拡張
　拡張書式：TRY系関数呼び出し〜CATCH〜ENDCATCH
　内容：TRY系の関数呼び出し時に関数が見つからなかった場合の挙動を制御
　　文法としてはIF〜ELSE〜ENDIFと同様になりました（違いは関数があった場合の処理がなくてもよいこと）
	TRYCALL UNKNOWN_FUNC ;存在しない関数
		関数があったとき、関数処理後に行う処理（あれば、なければ省略して直CATCHでOK）
	CATCH
		関数がなかったときに行う処理
	ENDCATCH
　　なお、入れ子可能です。（バグで不可でした）

・1708beta1a
1. TRY系関数呼び出し関数仕様拡張
　拡張書式：TRY系関数呼び出し〜CATCH〜ENDCATCH
　内容：TRY系の関数呼び出し時に関数が見つからなかった場合の挙動を制御
	TRYCALL UNKNOWN_FUNC ;存在しない関数
	CATCH ;必ずTRY系関数の次の行に
		CALL KNOWN_FUNC ;別の関数を呼び出す
	ENDCATCH
　　なお、入れ子可能です。（バグで不可でした）

・1707b
1.FORM構文拡張
　拡張書式：{変数・数式等, 表示桁数, 揃え(LEFT or RIGHT)}、%変数、文字列式等, 表示桁数, 揃え(LEFT or RIGHT)%
　内容：表示文字列長指定のFORM構文、第3項の揃えは省略すると右揃えになります

・1707a
1.WHILE〜WEND追加
　書式：WHILE (条件式) 〜 WEND
　内容：条件式を満たす限りループを繰り返す
　注意：常に満たし続ける条件を与えると、BREAKで抜けるようになっていない限り無限ループになります
　　　　あまりにループ処理が長いとEmueraが文句を言う場合があります
　　今までなかった理由は謎、あってもなくても困らないからだろうけど

2.CUSTOMDRAWLINE追加
　書式：CUSTOMDRAWELINE (表示に使う文字列)
　内容：指定した文字列を使って1行の区切りを表示

・1706a
1.キャラクタ変数MASTERNAME追加
　MASTERNAMEはそのキャラから見た主人の呼び名
　口上で主人の呼び名を独自に設定したいときに安全（他キャラとかぶらない）かつ
　簡単（MASTERNAMEを設定し、口上でMASTERNAMEを呼び出すだけ）にできる…と思う

2.キャラ定義データからのNAME、CALLNAME変数取得のための関数CSVNAME、CSVCALLNAME追加
　書式：CSV(CALL)NAME (キャラ番号(NOの方)), (SPキャラか　0：通常キャラ　0以外:SPキャラ)
　　　CSVで定義されたNAME、CALLNAMEを直接呼び出す関数
　　　所有してないキャラの名前とかが欲しいときとかにどうぞ

・1705b
1.キャラクタ変数NICKNAME追加
　NICKNAMEはキャラのあだ名CALLNAMEは保持しつつ別の呼び名を使えることが利点…なんだろうか？
　（CALLNAME書き換えで事足りるっちゃ足りる、むしろバックアップ用？）

・1705a
1. 変数交換命令SWAP実装
　書式：SWAP (変数1), (変数2)
　内容：変数1と変数2の中身を入れ替えます
　注意：交換する2つの変数は同じ型（整数型と整数型、文字列型と文字列型）である必要があります

2. 制限時間付待ち命令TWAIT実装
　書式：TWAIT (制限時間(整数or変数)), (入力受付フラグ(整数or変数))
　内容：制限時間経過するまで動作を停止します
　　　実際の挙動は入力受付フラグの指定によって変化します
　　　　　入力受付フラグ = 0：入力を受け付け、入力がなされると制限時間前でも次に進みます
　　　　　入力受付フラグ ≠ 0：入力を受け付けません（制限時間まで強制的に待たせることができます）