;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#
;
;	Module		:DUNGEON94_シーアーク.ERB
;	Facility	:ダンジョンナンバー94　シーアーク　ＭＡＰ0~10
;
;	Licence		:ライセンスフリー。
;
;	Modification Data:
;
;	Edit	Date			Author					Reason
;	001		2012/12/22		ネトリス				新規作成
;	002		2014/06/09		ネトリス				出現悪魔の処理を大幅変更、手動で登録しなくてもいいように変更
;	003		2015/03/15		GunＰ					扉で悪魔の出現を制御。悪魔の出現する種類が少ない場合ループするのを回避するように加筆。全体的に加筆整理。
;	004		2016/02/11		ああああ				キャプスロック使用時の最上階の過疎抑制、特殊レア枠悪魔が三体以上出現できそれ以外に出現できる悪魔が居ない時出現悪魔に0が来るのを抑制
;	005		2016/02/12		ああああ				キャプスロック使用時に三種類以下だとエラーになるのを防止
;	006		2016/05/12		ああああ				レア枠悪魔とエンカウント時に出現する種類の数で無限ループのエラーになるのを回避の為出現する悪魔の種類が十以下の場合レア枠は一切出現しない点を徹底化
;	007		2016/08/19		ああああ				エンカウント時に悪魔の選出の度に出現する悪魔のリストアップをしていたのをエンカウントの最初にリストアップしてその中から選ぶように変更、4Fまで入れる状態で4F右下の階段のところまで行くと脱出不能になるのを修正
;	008		2017/06/26		ああああ				悪魔の増加に伴い10Fで出現する悪魔の配列をはみ出す可能性が出たので配列のサイズを倍に

;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#
;=======================================================================
;シーアーク
;=======================================================================
;コンセプトは追加された悪魔を放り込むダンジョン！
;ただし今のところは特殊、条件合体悪魔と大天使など一部の悪魔は自重中です
;イベントなども作るかも？
;
;=======================================================================
;フラグ
;=======================================================================
;ダンジョンフラグ:94: 1 = 探索許可フラグ:フラグが進むごとにシーアーク内の鍵が開いていく
;ダンジョンフラグ:94: 2 = ダークおやじフラグ:悪魔の出現変更を利用しているかどうか、利用している場合はどちらを利用しているか判定
;ダンジョンフラグ:94: 3 = 悪魔が出現が0,する　1,しない
;ダンジョンフラグ:94:10 = ダークサマナー
;ダンジョンフラグ:94:11 = 小悪魔リリス
;=======================================================================
;攻略条件
;=======================================================================
@PREREQUISITE_DUNGEON_94
;イベント『施設利用許可』の後に探索可能
SIF ダンジョンフラグ:94:1 > 0
	RETURN 1
RETURN 0


;=======================================================================
;ダンジョン名
;=======================================================================
@GET_DUNGEON_NAME_94
RESULTS = Sea Ark


;=======================================================================
;フロア名表示
;=======================================================================
@FLOORNAME_94
PRINT Sea Ark
SELECTCASE FLAG:現M
	CASE 0
		PRINTL １Ｆ
	CASE 1
		PRINTL ２Ｆ
	CASE 2
		PRINTL ３Ｆ
	CASE 3
		PRINTL ４Ｆ
	CASE 4
		PRINTL ５Ｆ
	CASE 5
		PRINTL ６Ｆ
	CASE 6
		PRINTL ７Ｆ
	CASE 7
		PRINTL ８Ｆ
	CASE 8
		PRINTL ９Ｆ
	CASE 9
		PRINTL １０Ｆ
	CASE 10
		PRINTL １１Ｆ
	CASEELSE
		PRINTL
ENDSELECT

;=======================================================================
;スタート地点入力
;=======================================================================
@START_DUNGEON_94,ARG
FLAG:現M = 0
FLAG:現X = 7
FLAG:現Y = 12
;CALL AUTOMAP

;=======================================================================
;攻略開始時のイベント
;=======================================================================
@EVENT_DUNGEON_START_94

;=======================================================================
;脱出時のイベント
;=======================================================================
@EVENT_DUNGEON_END_94
;ダークおやじフラグ（ダンジョンフラグ:94:2）、悪魔出現フラグ（ダンジョンフラグ:94:3）をリセット
ダンジョンフラグ:94:2 = 0
ダンジョンフラグ:94:3 = 0

;=======================================================================
;指定したマスに進入可能か
;=======================================================================
@CAN_ENTER_94,ARG,ARG:1
LOCAL:1 = 0
SELECTCASE DA:ARG:(ARG:1)
	CASE 12
		SELECTCASE FLAG:現M
			CASE 1
			;３Ｆへの階段
			;イベント『施設利用許可２』まで探索不可
				IF FLAG:現Y < 4 && ダンジョンフラグ:94:1 == 1
					LOCAL:1 = 1
			;２Ｆエレベーター
			;イベント『施設利用許可３』まで探索不可
				ELSEIF FLAG:現Y > 4 && ダンジョンフラグ:94:1 <= 2
					LOCAL:1 = 1
				ENDIF
			CASE 3
			;５Ｆへの階段
			;イベント『施設利用許可４』まで探索不可
				SIF FLAG:現Y > 14 && ダンジョンフラグ:94:1 <= 3
					LOCAL:1 = 1
			CASE 5
			;６Ｆエレベーター
			;イベント『施設利用許可５』まで探索不可
				IF FLAG:現Y > 8 && ダンジョンフラグ:94:1 <= 4
					LOCAL:1 = 1
			;７Ｆへの階段
			;イベント『施設利用許可６』まで探索不可
				ELSEIF FLAG:現Y < 8 && ダンジョンフラグ:94:1 <= 5
					LOCAL:1 = 1
				ENDIF
			CASE 7
			;８Ｆエレベーター
			;イベント『施設利用許可７』まで探索不可
				IF FLAG:現Y > 8 && ダンジョンフラグ:94:1 <= 6
					LOCAL:1 = 1
			;９Ｆへの階段
			;イベント『施設利用許可８』まで探索不可
				ELSEIF FLAG:現Y < 8 && ダンジョンフラグ:94:1 <= 7
					LOCAL:1 = 1
				ENDIF
			CASE 9
			;１０Ｆエレベーター
			;イベント『施設利用許可９』まで探索不可
				SIF ダンジョンフラグ:94:1 <= 8
					LOCAL:1 = 1
			CASE 10
			;１１Ｆエレベーター
				SIF ダンジョンフラグ:94:1 <= 8
					LOCAL:1 = 1
		ENDSELECT

		IF LOCAL:1 == 1
			CALL MESSAGE_WINDOW_D, "", "＞The door is locked/＞You don't have permission to proceed"
			RETURN 0
			LOCAL:1 = 0
		;悪魔出現フラグ
		ELSEIF ダンジョンフラグ:94:3 == 0
			ダンジョンフラグ:94:3 = 1
		ELSEIF ダンジョンフラグ:94:3 == 1
			ダンジョンフラグ:94:3 = 0
		ENDIF

ENDSELECT
CALL CAN_ENTER,ARG,ARG:1
RETURN RESULT
;=======================================================================
;タイル定義
;=======================================================================
@DEFINE_TILES_94, ARGS, ARG, ARG:1
SELECTCASE ARGS
	CASE "!"
		RETURN 12
	CASE "#"
		RETURN 14
	CASE "$"
		RETURN 24
	CASE "%"
		RETURN 34
ENDSELECT

;=======================================================================
;特殊タイル表示
;=======================================================================
@TILE_MARK_COMMON_94_4, ARG , ARG:1 , ARG:2
SELECTCASE ARG / 10
	CASE 1 TO 3
		SETCOLOR 0x00ff00
		RESULTS = ｍ
ENDSELECT

;=======================================================================
;フロアデータ
;=======================================================================
@MAKE_FLOOR_94
SELECTCASE FLAG:現M
	CASE 0
	;１階
		FLAG:最大X = 15
		FLAG:最大Y = 16
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0              "
		CALL MAKE_FLOOR_LINE, 1, "       6       "
		CALL MAKE_FLOOR_LINE, 2, "   111111111   "
		CALL MAKE_FLOOR_LINE, 3, "   1       1   "
		CALL MAKE_FLOOR_LINE, 4, "   1 11111 1   "
		CALL MAKE_FLOOR_LINE, 5, "   111111111   "
		CALL MAKE_FLOOR_LINE, 6, "   111111111   "
		CALL MAKE_FLOOR_LINE, 7, "   111111111   "
		CALL MAKE_FLOOR_LINE, 8, " T211111111121 "
		CALL MAKE_FLOOR_LINE, 9, "   111111111   "
		CALL MAKE_FLOOR_LINE,10, " #111111111111 "
		CALL MAKE_FLOOR_LINE,11, "   11111111111 "
		CALL MAKE_FLOOR_LINE,12, "   11111111111 "
		CALL MAKE_FLOOR_LINE,13, "       2       "
		CALL MAKE_FLOOR_LINE,14, "       8       "
		CALL MAKE_FLOOR_LINE,15, "              0"

	CASE 1
	;２階
		FLAG:最大X = 23
		FLAG:最大Y = 24
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, "         1 6 $         "
		CALL MAKE_FLOOR_LINE, 2, "         1 ! 1         "
		CALL MAKE_FLOOR_LINE, 3, "     1111111111111     "
		CALL MAKE_FLOOR_LINE, 4, "     1     2     1     "
		CALL MAKE_FLOOR_LINE, 5, "   111     1     111   "
		CALL MAKE_FLOOR_LINE, 6, "   111     1     111   "
		CALL MAKE_FLOOR_LINE, 7, "   111   11111   111   "
		CALL MAKE_FLOOR_LINE, 8, "   111   11111     1   "
		CALL MAKE_FLOOR_LINE, 9, " 111112111111111   111 "
		CALL MAKE_FLOOR_LINE,10, " 1     1 !   ! 1     1 "
		CALL MAKE_FLOOR_LINE,11, " 1     1 1 E 1 111   1 "
		CALL MAKE_FLOOR_LINE,12, " 1     1 1 2 1 111   1 "
		CALL MAKE_FLOOR_LINE,13, " 111   1 11111 1112111 "
		CALL MAKE_FLOOR_LINE,14, "   1   1       1   1   "
		CALL MAKE_FLOOR_LINE,15, "   1112111111111   1   "
		CALL MAKE_FLOOR_LINE,16, "   111     1       1   "
		CALL MAKE_FLOOR_LINE,17, "   111     1     111   "
		CALL MAKE_FLOOR_LINE,18, "     1     2     1     "
		CALL MAKE_FLOOR_LINE,19, "     1111111111111     "
		CALL MAKE_FLOOR_LINE,20, "         11111         "
		CALL MAKE_FLOOR_LINE,21, "         11111         "
		CALL MAKE_FLOOR_LINE,22, "           7           "
		CALL MAKE_FLOOR_LINE,23, "                      0"
	CASE 2
	;３階
		FLAG:最大X = 23
		FLAG:最大Y = 23
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, "           7           "
		CALL MAKE_FLOOR_LINE, 2, "           !           "
		CALL MAKE_FLOOR_LINE, 3, "         11111         "
		CALL MAKE_FLOOR_LINE, 4, "         11111         "
		CALL MAKE_FLOOR_LINE, 5, "       111111111       "
		CALL MAKE_FLOOR_LINE, 6, "       1       2       "
		CALL MAKE_FLOOR_LINE, 7, " 1111111       1111111 "
		CALL MAKE_FLOOR_LINE, 8, "   111         11111   "
		CALL MAKE_FLOOR_LINE, 9, "   111   11111111111   "
		CALL MAKE_FLOOR_LINE,10, "     1   1   1   2     "
		CALL MAKE_FLOOR_LINE,11, "     11121   1   1     "
		CALL MAKE_FLOOR_LINE,12, "     1   1   1         "
		CALL MAKE_FLOOR_LINE,13, "   111   1111111   1   "
		CALL MAKE_FLOOR_LINE,14, "   111     11111   1   "
		CALL MAKE_FLOOR_LINE,15, " 1111121   11111111111 "
		CALL MAKE_FLOOR_LINE,16, "       1   2   1       "
		CALL MAKE_FLOOR_LINE,17, "       11111   1       "
		CALL MAKE_FLOOR_LINE,18, "         111           "
		CALL MAKE_FLOOR_LINE,19, "         11111         "
		CALL MAKE_FLOOR_LINE,20, "           1           "
		CALL MAKE_FLOOR_LINE,21, "           1           "
		CALL MAKE_FLOOR_LINE,22, "                      0"

	CASE 3
	;４階
		FLAG:最大X = 23
		FLAG:最大Y = 23
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, " 1111111       1111111 "
		CALL MAKE_FLOOR_LINE, 2, " 1   111       1   111 "
		CALL MAKE_FLOOR_LINE, 3, " 1   111       1   111 "
		CALL MAKE_FLOOR_LINE, 4, " 1   111       1     1 "
		CALL MAKE_FLOOR_LINE, 5, " 1   11111   111     1 "
		CALL MAKE_FLOOR_LINE, 6, " 1   111     1       1 "
		CALL MAKE_FLOOR_LINE, 7, " 1111111   111   11111 "
		CALL MAKE_FLOOR_LINE, 8, "     111   111   1     "
		CALL MAKE_FLOOR_LINE, 9, "     1111111111111     "
		CALL MAKE_FLOOR_LINE,10, "       1 !   ! 1       "
		CALL MAKE_FLOOR_LINE,11, "       1 1 E 1 1       "
		CALL MAKE_FLOOR_LINE,12, "       1 1 2 1 1       "
		CALL MAKE_FLOOR_LINE,13, "     111 11111 111     "
		CALL MAKE_FLOOR_LINE,14, "     111       111     "
		CALL MAKE_FLOOR_LINE,15, " 111111111111111111111 "
		CALL MAKE_FLOOR_LINE,16, " 1   11111   111   ! 1 "
		CALL MAKE_FLOOR_LINE,17, " 1   11111   111 6 1 1 "
		CALL MAKE_FLOOR_LINE,18, " 1     1       1 2 1 1 "
		CALL MAKE_FLOOR_LINE,19, " 1     1       1 111 1 "
		CALL MAKE_FLOOR_LINE,20, " 1     1       1     1 "
		CALL MAKE_FLOOR_LINE,21, " 1111111       1111111 "
		CALL MAKE_FLOOR_LINE,22, "                      0"

	CASE 4
	;５階
		FLAG:最大X = 21
		FLAG:最大Y = 23
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                    "
		CALL MAKE_FLOOR_LINE, 1, "          1          "
		CALL MAKE_FLOOR_LINE, 2, "          1          "
		CALL MAKE_FLOOR_LINE, 3, "    1111111111111    "
		CALL MAKE_FLOOR_LINE, 4, "    11111       1    "
		CALL MAKE_FLOOR_LINE, 5, "  1111111       111  "
		CALL MAKE_FLOOR_LINE, 6, "  1     1       111  "
		CALL MAKE_FLOOR_LINE, 7, "  1     1   1   111  "
		CALL MAKE_FLOOR_LINE, 8, "  1     1   1   111  "
		CALL MAKE_FLOOR_LINE, 9, "  111   11111111111  "
		CALL MAKE_FLOOR_LINE,10, "  111   1   1     1  "
		CALL MAKE_FLOOR_LINE,11, " 1111   1   1     11 "
		CALL MAKE_FLOOR_LINE,12, "  111   1   1     1  "
		CALL MAKE_FLOOR_LINE,13, "  111   11111111111  "
		CALL MAKE_FLOOR_LINE,14, "  1       1   11111  "
		CALL MAKE_FLOOR_LINE,15, "  1       1   11111  "
		CALL MAKE_FLOOR_LINE,16, "  1       1       1  "
		CALL MAKE_FLOOR_LINE,17, "  111   111     7 1  "
		CALL MAKE_FLOOR_LINE,18, "    1   111     2    "
		CALL MAKE_FLOOR_LINE,19, "    1111111!11111    "
		CALL MAKE_FLOOR_LINE,20, "          1          "
		CALL MAKE_FLOOR_LINE,21, "          1          "
		CALL MAKE_FLOOR_LINE,22, "                    0"

	CASE 5
	;６階
		FLAG:最大X = 23
		FLAG:最大Y = 23
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, "         11111         "
		CALL MAKE_FLOOR_LINE, 2, "         11111         "
		CALL MAKE_FLOOR_LINE, 3, "     1111111111111     "
		CALL MAKE_FLOOR_LINE, 4, "     1     1   111     "
		CALL MAKE_FLOOR_LINE, 5, "   111     1   11111   "
		CALL MAKE_FLOOR_LINE, 6, "   111     !   1   1   "
		CALL MAKE_FLOOR_LINE, 7, " 1111111   6   1   111 "
		CALL MAKE_FLOOR_LINE, 8, " 2   111       1     2 "
		CALL MAKE_FLOOR_LINE, 9, " 111 11111   111   111 "
		CALL MAKE_FLOOR_LINE,10, "   1 111 !   ! 1   1   "
		CALL MAKE_FLOOR_LINE,11, "   1 111 1 E 1 1   1   "
		CALL MAKE_FLOOR_LINE,12, "   1   1 1 2 1 1   1   "
		CALL MAKE_FLOOR_LINE,13, "   111 1 11111 11111   "
		CALL MAKE_FLOOR_LINE,14, "     1 2       111     "
		CALL MAKE_FLOOR_LINE,15, "     111 111111111     "
		CALL MAKE_FLOOR_LINE,16, "       1 2     1       "
		CALL MAKE_FLOOR_LINE,17, "       111   1 1       "
		CALL MAKE_FLOOR_LINE,18, "         1   1         "
		CALL MAKE_FLOOR_LINE,19, "         11111         "
		CALL MAKE_FLOOR_LINE,20, "           1           "
		CALL MAKE_FLOOR_LINE,21, "           1           "
		CALL MAKE_FLOOR_LINE,22, "                      0"

	CASE 6
	;７階
		FLAG:最大X = 23
		FLAG:最大Y = 23
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, " 111111111111111111111 "
		CALL MAKE_FLOOR_LINE, 2, " 1     1     1       1 "
		CALL MAKE_FLOOR_LINE, 3, " 1     1     1       1 "
		CALL MAKE_FLOOR_LINE, 4, " 1     1     1       1 "
		CALL MAKE_FLOOR_LINE, 5, " 1   1111111111111   1 "
		CALL MAKE_FLOOR_LINE, 6, " 1   11111 ! 1   1   1 "
		CALL MAKE_FLOOR_LINE, 7, " 1   11111 7 1   1   1 "
		CALL MAKE_FLOOR_LINE, 8, " 1   11111   1   1   1 "
		CALL MAKE_FLOOR_LINE, 9, " 1111111111111   1   1 "
		CALL MAKE_FLOOR_LINE,10, " 1       1   1   1   1 "
		CALL MAKE_FLOOR_LINE,11, " 1       1   1   1   1 "
		CALL MAKE_FLOOR_LINE,12, " 1       1   1   1   1 "
		CALL MAKE_FLOOR_LINE,13, " 1111111111111   1   1 "
		CALL MAKE_FLOOR_LINE,14, " 111     1   1   1   1 "
		CALL MAKE_FLOOR_LINE,15, " 111     1   11111   1 "
		CALL MAKE_FLOOR_LINE,16, " 111     1           1 "
		CALL MAKE_FLOOR_LINE,17, " 11111   1           1 "
		CALL MAKE_FLOOR_LINE,18, " 1   1   1           1 "
		CALL MAKE_FLOOR_LINE,19, " 1   1   1   111111111 "
		CALL MAKE_FLOOR_LINE,20, " 1   1   1   111111111 "
		CALL MAKE_FLOOR_LINE,21, " 111111111111111111111 "
		CALL MAKE_FLOOR_LINE,22, "                      0"


	CASE 7
	;８階
		FLAG:最大X = 23
		FLAG:最大Y = 23

;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, "       111111111       "
		CALL MAKE_FLOOR_LINE, 2, "       1 !   ! 1       "
		CALL MAKE_FLOOR_LINE, 3, "       1 1 6 1 1       "
		CALL MAKE_FLOOR_LINE, 4, "       1 1 2 1 1       "
		CALL MAKE_FLOOR_LINE, 5, "       1 11111 1       "
		CALL MAKE_FLOOR_LINE, 6, "       1       1       "
		CALL MAKE_FLOOR_LINE, 7, " 1111111 11111 1111111 "
		CALL MAKE_FLOOR_LINE, 8, " 1       11111       1 "
		CALL MAKE_FLOOR_LINE, 9, " 1 11111111111111111 1 "
		CALL MAKE_FLOOR_LINE,10, " 1 11111 !   ! 11111 1 "
		CALL MAKE_FLOOR_LINE,11, " 1 11111 1 E 1 11111 1 "
		CALL MAKE_FLOOR_LINE,12, " 1 11111 1 2 1 11111 1 "
		CALL MAKE_FLOOR_LINE,13, " 1 11111 11111 11111 1 "
		CALL MAKE_FLOOR_LINE,14, " 1     1       1     1 "
		CALL MAKE_FLOOR_LINE,15, " 111111111111111111111 "
		CALL MAKE_FLOOR_LINE,16, "       1 2   2 1       "
		CALL MAKE_FLOOR_LINE,17, "       1 1 1 1 1       "
		CALL MAKE_FLOOR_LINE,18, "       1 1 2 1 1       "
		CALL MAKE_FLOOR_LINE,19, "       1 11111 1       "
		CALL MAKE_FLOOR_LINE,20, "       1       1       "
		CALL MAKE_FLOOR_LINE,21, "       111111111       "
		CALL MAKE_FLOOR_LINE,22, "                      0"


	CASE 8
	;９階
		FLAG:最大X = 21
		FLAG:最大Y = 21
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                    "
		CALL MAKE_FLOOR_LINE, 1, "        1 7 1        "
		CALL MAKE_FLOOR_LINE, 2, "        1 ! 1        "
		CALL MAKE_FLOOR_LINE, 3, "      111111111      "
		CALL MAKE_FLOOR_LINE, 4, "      1   1   1      "
		CALL MAKE_FLOOR_LINE, 5, "    111   1   111    "
		CALL MAKE_FLOOR_LINE, 6, "    1     1   111    "
		CALL MAKE_FLOOR_LINE, 7, "  111 1111111 11111  "
		CALL MAKE_FLOOR_LINE, 8, "  1   111   1 2   1  "
		CALL MAKE_FLOOR_LINE, 9, " 11   111   1 1   11 "
		CALL MAKE_FLOOR_LINE,10, "  2   1     1 1   1  "
		CALL MAKE_FLOOR_LINE,11, "  11111   111 11111  "
		CALL MAKE_FLOOR_LINE,12, "    111   1   111    "
		CALL MAKE_FLOOR_LINE,13, "    1111111   111    "
		CALL MAKE_FLOOR_LINE,14, "      1   2   1      "
		CALL MAKE_FLOOR_LINE,15, "      1   11111      "
		CALL MAKE_FLOOR_LINE,16, "          111        "
		CALL MAKE_FLOOR_LINE,17, "        11111        "
		CALL MAKE_FLOOR_LINE,18, "          1          "
		CALL MAKE_FLOOR_LINE,19, "          1          "
		CALL MAKE_FLOOR_LINE,20, "                    0"


	CASE 9
	;１０階
		FLAG:最大X = 23
		FLAG:最大Y = 23
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0                      "
		CALL MAKE_FLOOR_LINE, 1, "         11111         "
		CALL MAKE_FLOOR_LINE, 2, "         1 2 1         "
		CALL MAKE_FLOOR_LINE, 3, "     11111 1 11111     "
		CALL MAKE_FLOOR_LINE, 4, "     1     1     1     "
		CALL MAKE_FLOOR_LINE, 5, "   111     1     111   "
		CALL MAKE_FLOOR_LINE, 6, "   1       2       1   "
		CALL MAKE_FLOOR_LINE, 7, "   1     11111     1   "
		CALL MAKE_FLOOR_LINE, 8, "   1     11111     1   "
		CALL MAKE_FLOOR_LINE, 9, " 111   111111111   111 "
		CALL MAKE_FLOOR_LINE,10, " 1     1 !   ! 1     1 "
		CALL MAKE_FLOOR_LINE,11, " 1     1 1 E 1 1     1 "
		CALL MAKE_FLOOR_LINE,12, " 1     1 1 2 1 1     1 "
		CALL MAKE_FLOOR_LINE,13, " 111   1 11111 1   111 "
		CALL MAKE_FLOOR_LINE,14, "   1   1       1   1   "
		CALL MAKE_FLOOR_LINE,15, "   1   111111111   1   "
		CALL MAKE_FLOOR_LINE,16, "   1     11111     1   "
		CALL MAKE_FLOOR_LINE,17, "   111   11111   111   "
		CALL MAKE_FLOOR_LINE,18, "     1     1     1     "
		CALL MAKE_FLOOR_LINE,19, "     11111 1 11111     "
		CALL MAKE_FLOOR_LINE,20, "         1 2 1         "
		CALL MAKE_FLOOR_LINE,21, "         11111         "
		CALL MAKE_FLOOR_LINE,22, "                      0"

	CASE 10
	;１１階
		FLAG:最大X = 15
		FLAG:最大Y = 17
;								 			1		  2
;								  012345678901234567890123
		CALL MAKE_FLOOR_LINE, 0, "0              "
		CALL MAKE_FLOOR_LINE, 1, "       %       "
		CALL MAKE_FLOOR_LINE, 2, "       2       "
		CALL MAKE_FLOOR_LINE, 3, "       1       "
		CALL MAKE_FLOOR_LINE, 4, "       2       "
		CALL MAKE_FLOOR_LINE, 5, "   111111111   "
		CALL MAKE_FLOOR_LINE, 6, "   1   1   1   "
		CALL MAKE_FLOOR_LINE, 7, " 111   1   111 "
		CALL MAKE_FLOOR_LINE, 8, " 1     2     1 "
		CALL MAKE_FLOOR_LINE, 9, " 1     1     1 "
		CALL MAKE_FLOOR_LINE,10, " 1     1     1 "
		CALL MAKE_FLOOR_LINE,11, " 1111111111111 "
		CALL MAKE_FLOOR_LINE,12, "     !   !     "
		CALL MAKE_FLOOR_LINE,13, "     1 E 1     "
		CALL MAKE_FLOOR_LINE,14, "     1 2 1     "
		CALL MAKE_FLOOR_LINE,15, "     11111     "
		CALL MAKE_FLOOR_LINE,16, "              0"
	CASEELSE

ENDSELECT
;=======================================================================
;タイル調整
;=======================================================================
@MAKE_FLOOR_LINE_COMMON_94, ARG, ARG:1, ARG:2
#LOCALSIZE 10
;LOCAL:0〜9 それぞれ何個目のARGなのかを記憶しています
;LOCAL:3 宝箱→使用フラグはダンジョンフラグ:70~74
;指定された座標が(0,0)である場合、つまり新しいマップを読み込んだ時はLOCALを消去します
SIF ARG:1 == 0 && ARG:2 == 0
	VARSET LOCAL
SELECTCASE ARG
	CASE 3
		;宝箱は多くの場合、開けたフラグが立っていると床を代入します
		;そのマップでどの宝箱を開けたかは、そのマップの宝箱管理用変数の何番目のビットが立っているかで判断します
		IF GETBIT(ダンジョンフラグ:(FLAG:現ダンジョン):(FLAG:現M+70), LOCAL:3)
			DA:(ARG:1):(ARG:2) = 1
		ELSE
			DA:(ARG:1):(ARG:2) = FLAG:現M *1000 + LOCAL:3 * 10 + 3
		ENDIF
		LOCAL:3++
	CASE 4 TO 9
		DA:(ARG:1):(ARG:2) = FLAG:現M *1000 + LOCAL:ARG * 10 + ARG
		LOCAL:ARG++
	
ENDSELECT


;=======================================================================
;[5]調べる　実行時のイベント
;=======================================================================
@EVENT_CHECK_DUNGEON_94
CALL EVENT_DUNGEON_94
RETURN RESULT
;=======================================================================
;タイル進入時のイベント
;=======================================================================
@EVENT_ENTER_DUNGEON_94,ARG
;ARG = 進入時の向き　0の場合ワープなど
CALL EVENT_DUNGEON_94, ARG , 0
RETURN RESULT

@EVENT_DUNGEON_94, ARG, ARG:1
SELECTCASE DA:(FLAG:現X):(FLAG:現Y) % 10

;==========
;出口の処理
;==========
CASE 8
	CALL DUNGEON_EXIT
RETURN 1
;==========
;扉の処理
;==========
CASE 2
	CALL DUNGEON_DOOR,ARG
RETURN 1
;========
;宝の処理
;========
CASE 3
CALL TREASURE_94
RETURN 1

;=======
;階段
;=======
CASE 6
CALL UPSTAIRS_94
RETURN RESULT

CASE 7
CALL DOWNSTAIRS_94
RETURN RESULT
;==========
;イベント
;==========
CASE 4
SELECTCASE DA:(FLAG:現X):(FLAG:現Y) / 10
	CASE 1
	;１Ｆダークサマナー
		IF ダンジョンフラグ:94:10 == 0
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "Phew....　oh?/I don't recognize you, is this your first time here?"
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "This was originally going to be a hotel./But something happened and the place was abandoned."
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "This place was badly warped by other worlds.../Demons have appeared."
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "Then, because of the demons, it was declared a 『hunting ground』/...A neutral one."
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "Various summoners have come here for meetings.../It is an unspoken rule to not interfere./Well, I wouldn't want to break that rule even for money."
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "That's what you should know. /Well, take care."
			ダンジョンフラグ:94:10 = 1
		ELSE
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "Oh〜, have you been working hard?/I've been having lower-back pain,"
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "when I tried to recruit a Lilim a little while ago..."
			CALL MESSAGE_WINDOW_D, "Dark Summoner", "Hah, I don't want to get older./I used to easily win against succubi."
		ENDIF
	CASE 2
	;ダークおやじ
		CALL MESSAGE_WINDOW_D, "Dark Old Man", "You there!/Are you troubled by meeting only male demons?"
		CALL MESSAGE_WINDOW_D, "Dark Old Man", "If you allow me to,/I'll make it so male demons won't appear"
		CALL MESSAGE_WINDOW_D, "Dark Old Man", @"Of course this is not free./The price...{ダンジョンフラグ:94:1*50} macca"
		CALL MESSAGE_WINDOW_D, "Dark Old Man", "Do you want me to change something?"
		$魔貨不足
		;CALL INPUT_SELECT_D, "\@!ダンジョンフラグ:94:2 == 1?[0] Make only female demons appear/#\@\@!ダンジョンフラグ:94:2 == 2?[1] Make only male demons appear/#\@\@ダンジョンフラグ:94:2?[2] Revert restrictions/#\@[3] Do nothing"
		SELECTCASE ダンジョンフラグ:94:2
			;通常
			CASE 0
				CALL INPUT_SELECT_D, "[0] Only female demons/[1] Only male demons/[3] No change"
			;女悪魔のみ設定中
			CASE 1
				CALL INPUT_SELECT_D, "[1] Only male demons/[3]No change"
			;男悪魔のみ設定中
			CASE 2
				CALL INPUT_SELECT_D, "[0] Only female demons/[3] No change"
		ENDSELECT
		IF RESULT < 3 && MONEY:1 < ダンジョンフラグ:94:1*50
			CALL MESSAGE_WINDOW_D, "", "Not enough macca"
			GOTO 魔貨不足
		ENDIF
		SELECTCASE RESULT
			;出現悪魔をオンナ悪魔だけに
			CASE 0
				CALL MESSAGE_WINDOW_D, "Dark Old Man", "Ok ok, only female demons will appear now!/Go look, I'll be busy now."
				MONEY:1 -= ダンジョンフラグ:94:1*50
				ダンジョンフラグ:94:2 = 1
			;出現悪魔をオトコ悪魔だけに
			CASE 1
				CALL MESSAGE_WINDOW_D, "Dark Old Man", "...Ok, now male demons shall be plentiful./Go, finish quickly...mumble."
				MONEY:1 -= ダンジョンフラグ:94:1*50
				ダンジョンフラグ:94:2 = 2
			;元に戻す
			CASE 2
				CALL MESSAGE_WINDOW_D, "Dark Old Man", "Ok, I'll set it back to normal./Come again anytime."
				MONEY:1 -= ダンジョンフラグ:94:1*50
				ダンジョンフラグ:94:2 = 0
			;何もしない
			CASE 3
				CALL MESSAGE_WINDOW_D, "Dark Old Man", "Ok, no change then./Come back any time."
		ENDSELECT
	CASE 3
	;１１Ｆイベント
		IF ダンジョンフラグ:94:11 == 0
			CALL MESSAGE_WINDOW_D, "Shoakuma Lilim", "That?A human〜/Another came, what did you come for?"
			CALL MESSAGE_WINDOW_D, "Shoakuma Lilim", "Eh?Working??"
			CALL MESSAGE_WINDOW_D, "Shoakuma Lilim", "Mmmm...I don't really understand./But, I think you should rest a bit after working so hard."
			ダンジョンフラグ:94:11 = 1
		ELSE
			;小悪魔リリム、マジ小悪魔
			CALL MESSAGE_WINDOW_D, "Shoakuma Lilim", "The world of humans is really fun〜/A man I didn't know gave me a meal last time♪"
			CALL MESSAGE_WINDOW_D, "Shoakuma Lilim", @"Afterwards？/Of course I gave thanks%ハート()%"
			CALL MESSAGE_WINDOW_D, "Shoakuma Lilim", "A wonderful filling dessert.../I was very satisfied, ehe♪"
		ENDIF
		RETURN 0
ENDSELECT

ENDSELECT
RETURN 0


;=======================================================================
;エンカウント率
;=======================================================================
@ENCOUNT_RATE_94
SIF ダンジョンフラグ:94:3 == 1
	FLAG:エンカウント率 = 0
SELECTCASE FLAG:現M
	CASE 0 , 10
		FLAG:エンカウント率 = 0
	CASEELSE
		FLAG:エンカウント率 = FLAG:未遭遇歩数*3
ENDSELECT
SIF FLAG:未遭遇歩数 < 5
	FLAG:エンカウント率 = 0
SIF ダンジョンフラグ:94:3 == 1
	FLAG:エンカウント率 = 0
;=======================================================================
;必要レベル目安
;推奨LV 雑魚最低LV 雑魚最高LV ボスLV 
;=======================================================================
@GET_DUNGEON_LV_94
RETURN 5, 3, 9, 10
;=======================================================================
;エンカウント処理
;=======================================================================
@CHECK_ENCOUNT_94
IF RAND:100 < FLAG:エンカウント率
	CALL ENEMY_TABLE_94
	RETURN 1
ELSE
	FLAG:未遭遇歩数 += 1
	RETURN 0
ENDIF
;=======================================================================
;敵の種族の種類数
;RETURN X でXが種類の数になります
;あまりいろんなのが混ざっているとCOOPがとりにくくなったり
;敵の攻撃属性が多くなる傾向にあるので、
;種類の数は1・2種類を主体に時々3種類くらいを基本にするのが望ましいと思われます
;=======================================================================
@CLASS_NUM_94
SELECTCASE FLAG:現M
	CASE 1
		RETURN CLASS_NUM_COMMON("初級")
	CASE 2
		RETURN CLASS_NUM_COMMON("中級")
	CASE 3
		RETURN CLASS_NUM_COMMON("中級")
	CASE 4
		RETURN CLASS_NUM_COMMON("中級")
	CASE 5
		RETURN CLASS_NUM_COMMON("上級")
	CASE 6
		RETURN CLASS_NUM_COMMON("上級")
	CASE 7
		RETURN CLASS_NUM_COMMON("上級")
	CASE 8
		RETURN CLASS_NUM_COMMON("最上級")
	CASE 9
		RETURN CLASS_NUM_COMMON("最上級")
ENDSELECT

;=======================================================================
;敵の総数
;ARGは出現する敵の種類です
;RAND(X, Y)はX〜Y-1のうちのどれかになるRANDです
;なお、ここで帰った数字は下限を種族数、上限を10として自動的に調整されます
;
;=======================================================================
@ENEMY_NUM_94, ARG
SELECTCASE FLAG:現M
	CASE 1
		RETURN ENEMY_NUM_COMMON("初級", ARG)
	CASE 2
		RETURN ENEMY_NUM_COMMON("中級", ARG)
	CASE 3
		RETURN ENEMY_NUM_COMMON("中級", ARG)
	CASE 4
		RETURN ENEMY_NUM_COMMON("中級", ARG)
	CASE 5
		RETURN ENEMY_NUM_COMMON("上級", ARG)
	CASE 6
		RETURN ENEMY_NUM_COMMON("上級", ARG)
	CASE 7
		RETURN ENEMY_NUM_COMMON("上級", ARG)
	CASE 8
		RETURN ENEMY_NUM_COMMON("最上級", ARG)
	CASE 9
		RETURN ENEMY_NUM_COMMON("最上級", ARG)
ENDSELECT
;=======================================================================
;敵の種類
;=======================================================================
@ENEMY_TABLE_94
#DIM CLASS_NUM, 1
#DIM ENEMY_NUM, 1
#DIM MAXENEMY, 1
#DIM MINENEMY, 1
#DIM ENEMY, 10
#DIM ENEMYLV, 10
#DIM 出現悪魔, 200
#DIM 出現最高レベル, 1
#DIM 出現最低レベル, 1
#DIM 出現する悪魔の種類, 1
VARSET 出現悪魔
VARSET RESULT
VARSET ENEMY, -1
;最初に種族数を取得
TRYCCALLFORM CLASS_NUM_{FLAG:現ダンジョン}
	CLASS_NUM = RESULT
CATCH
	;一応、定義ファイルがない場合、デフォルトの数値を代入
	SELECTCASE RAND:100
		CASE IS < 40
			CLASS_NUM = 1
		CASE IS < 80
			CLASS_NUM = 2
		CASEELSE
			CLASS_NUM = 3
	ENDSELECT
ENDCATCH
;敵の総数を取得
TRYCCALLFORM ENEMY_NUM_{FLAG:現ダンジョン}, CLASS_NUM
	ENEMY_NUM = LIMIT(RESULT, CLASS_NUM, 10)
CATCH
	ENEMY_NUM = LIMIT(RESULT, CLASS_NUM*2, CLASS_NUM*4)
ENDCATCH

LOCAL   = 0
LOCAL:1 = 0 ;レア悪魔数カウント
LOCAL:2 = 0 ;CAPSLOCK
;フロアに対応した出現悪魔の最高レベルと最低レベルを設定
SELECTCASE FLAG:現M
	;２Ｆ（ＬＶ１〜１０）
	CASE 1
		出現最高レベル = 10
		出現最低レベル = 1
	;３Ｆ（ＬＶ１１〜１６）
	CASE 2
		出現最高レベル = 16
		出現最低レベル = 11
	;４Ｆ（ＬＶ１７〜２２）
	CASE 3
		出現最高レベル = 22
		出現最低レベル = 17
	;５Ｆ（ＬＶ２３〜２９）
	CASE 4
		出現最高レベル = 29
		出現最低レベル = 23
	;６Ｆ（ＬＶ３０〜３６）
	CASE 5
		出現最高レベル = 36
		出現最低レベル = 30
	;７Ｆ（ＬＶ３７〜４３）
	CASE 6
		出現最高レベル = 43
		出現最低レベル = 37
	;８Ｆ（ＬＶ４４〜５０）
	CASE 7
		出現最高レベル = 50
		出現最低レベル = 44
	;９Ｆ（ＬＶ５１〜５７）
	CASE 8
		出現最高レベル = 57
		出現最低レベル = 51
	;１０Ｆ（ＬＶ５８〜）
	CASE 9
		出現最高レベル = 100
		出現最低レベル = 58
ENDSELECT

FOR COUNT, 1, 1800
	;- 悪魔出現能力判定部 -------------------------------------------------------------------------
	;CSVがあるか確認、なければ弾く
	SIF EXISTCSV(COUNT, 0) == 0
		CONTINUE
	;レベルがフロアに合わない場合は弾く
	SIF CSVBASE(COUNT, GETNUM(BASE, "LV")) > 出現最高レベル || CSVBASE(COUNT, GETNUM(BASE, "LV")) < 出現最低レベル
		CONTINUE

	;一部特殊悪魔は条件次第で出現させる
	SIF COUNT == [[キャラ:ハールート]]
		GOTO SET_ENEMYS_NO
	SIF COUNT == [[キャラ:マールート]]
		GOTO SET_ENEMYS_NO

	;解析率が50未満の悪魔は出現しない
	SIF FLAG:(COUNT+20000) < 500
		CONTINUE
	;特殊合体のみ、合体条件有り、全書召喚不可は弾く
	SIF CSVCFLAG(COUNT, GETNUM(CFLAG, "特殊合体のみ")) || CSVCFLAG(COUNT, GETNUM(CFLAG, "合体条件有り")) || CSVCFLAG(COUNT, GETNUM(CFLAG, "全書召喚不可"))
		CONTINUE

	;- 悪魔出現ダンジョン設定判定部と出現追加処理 -------------------------------------------------
	$SET_ENEMYS_NO
	;ダークおやじでオンナ悪魔のみに設定している場合
	SIF ダンジョンフラグ:94:2 == 1 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 0
		CONTINUE
	;ダークおやじでオトコ悪魔のみに設定している場合
	SIF ダンジョンフラグ:94:2 == 2 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 1
		CONTINUE
	出現悪魔:LOCAL = COUNT
	LOCAL ++
NEXT

;レア?悪魔処理
;メガテン系イベント以外不許可の場合は出現させない
IF GETBIT(FLAG:EXTRAイベント設定, 0) == 0
	FOR COUNT, 5000, 5049
		;CSVがあるか確認、なければ弾く
		SIF EXISTCSV(COUNT, 0) == 0
			CONTINUE
		;レベルがフロアに合わない場合は弾く
		SIF CSVBASE(COUNT, GETNUM(BASE, "LV")) > 出現最高レベル || CSVBASE(COUNT, GETNUM(BASE, "LV")) < 出現最低レベル
			CONTINUE
		;ダークおやじでオンナ悪魔のみに設定している場合
		SIF ダンジョンフラグ:94:2 == 1 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 0
			CONTINUE
		;ダークおやじでオトコ悪魔のみに設定している場合
		SIF ダンジョンフラグ:94:2 == 2 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 1
			CONTINUE
		出現悪魔:LOCAL = COUNT
		LOCAL ++
		LOCAL:1 ++
	NEXT
ENDIF

;出現する悪魔の種類が十以下の場合にレア枠全てを消す

IF LOCAL < 11
	LOCAL -= LOCAL:1
	LOCAL:1 = 0
ENDIF

LOCAL:2 = LOCAL

;キャプスロックで出現出来ない悪魔をリストから除外して再構成
IF EQUIP:MASTER:CAPSLOCK && LOCAL:2 > 2
	LOCAL = 0
	FOR COUNT, 0, LOCAL:2
		IF CSVBASE(出現悪魔:COUNT, GETNUM(BASE, "LV")) > BASE:MASTER:LV - 12
			出現悪魔:LOCAL = 出現悪魔:COUNT
			LOCAL ++
		ELSEIF COUNT > LOCAL:2 - LOCAL:1 -1
			LOCAL:1 --
		ENDIF
	NEXT
;出現悪魔の種類が3以下だとエラーを吐く可能性があるのでキャプスロックで出現出来ないであろう適当な悪魔で防止
	IF LOCAL < 3 && LOCAL > 0
;レア枠悪魔をずらす
		IF LOCAL:1 > 0
			FOR COUNT, 0, LOCAL:1
				出現悪魔:(2 - COUNT) = 出現悪魔:(LOCAL - COUNT -1)
			NEXT
		ENDIF
;ずらした数に応じて出現できないであろう悪魔で埋める
		IF LOCAL == 1
			IF LOCAL:1
				出現悪魔:1 = 501
				出現悪魔:0 = 1028
			ELSE
				出現悪魔:1 = 501
				出現悪魔:2 = 1028
			ENDIF
		ELSE
			IF LOCAL:1 == 2
				出現悪魔:0 = 1028
			ELSEIF LOCAL:1 == 1
				出現悪魔:1 = 1028
			ELSE
				出現悪魔:2 = 1028
			ENDIF
		ENDIF
		LOCAL = 3
	ENDIF
ENDIF

IF LOCAL:2 < 3 || LOCAL == 0 || LOCAL == LOCAL:1
	出現する悪魔の種類 = 6
	出現悪魔:0 = [[キャラ:ピクシー]]
	出現悪魔:1 = [[キャラ:ハーピー]]
	出現悪魔:2 = [[キャラ:アプサラス]]
	出現悪魔:3 = [[キャラ:ノッカー]]
	出現悪魔:4 = [[キャラ:チョンチョン]]
	出現悪魔:5 = [[キャラ:ガキ]]
	LOCAL:1 = 0
ELSE
	出現する悪魔の種類 = LOCAL
ENDIF

LOCAL = 0


	WHILE LOCAL < CLASS_NUM
		IF (RAND:100 < 15) && (LOCAL:1>0)
			LOCAL:2 = (出現する悪魔の種類 - (LOCAL:1)) + RAND:(LOCAL:1)
		ELSEIF (出現する悪魔の種類 - (LOCAL:1)) > 0
			LOCAL:2 = RAND:(出現する悪魔の種類 - (LOCAL:1))
		ENDIF
		SIF MATCH(ENEMY, 出現悪魔:(LOCAL:2))
			CONTINUE
		ENEMY:LOCAL = 出現悪魔:(LOCAL:2)
		ENEMYLV:LOCAL = CSVBASE(出現悪魔:(LOCAL:2),GETNUM(BASE, "LV"))
		LOCAL += 1
	WEND

LOCAL = 0
;LOCAL:7~16に7~16を入れる
FOR LOCAL, 7, 17
	LOCAL:LOCAL = LOCAL
NEXT
;LOCAL:7~16をシャッフル
FOR LOCAL, 7, 17
	SWAP LOCAL:LOCAL, LOCAL:RAND(7, 17)
NEXT

;実際の配置
FOR LOCAL, 0, ENEMY_NUM
	LOCAL:1 = LOCAL:(LOCAL + 7)
	SIF POS(LOCAL:1) >= 0
		CONTINUE
	LOCAL:2 = LOCAL < CLASS_NUM ? LOCAL # RAND:CLASS_NUM
	CALL SET_ENEMY, LOCAL:1, ENEMY:(LOCAL:2), ENEMYLV:(LOCAL:2)
	;ここでステータス変化させる場合の関数を呼ぶ
	TRYCALLFORM SET_ENEMY_STATUS_{FLAG:現ダンジョン}, CHARANUM - 1
NEXT
@ENEMY_94, ARG
#DIM 出現悪魔, 100
#DIM 出現最高レベル, 1
#DIM 出現最低レベル, 1
#DIM 出現する悪魔の種類, 1
VARSET 出現悪魔
LOCAL   = 0
LOCAL:1 = 0 ;レア悪魔数カウント
LOCAL:2 = 0 ;CAPSLOCK
;フロアに対応した出現悪魔の最高レベルと最低レベルを設定
SELECTCASE FLAG:現M
	;２Ｆ（ＬＶ１〜１０）
	CASE 1
		出現最高レベル = 10
		出現最低レベル = 1
	;３Ｆ（ＬＶ１１〜１６）
	CASE 2
		出現最高レベル = 16
		出現最低レベル = 11
	;４Ｆ（ＬＶ１７〜２２）
	CASE 3
		出現最高レベル = 22
		出現最低レベル = 17
	;５Ｆ（ＬＶ２３〜２９）
	CASE 4
		出現最高レベル = 29
		出現最低レベル = 23
	;６Ｆ（ＬＶ３０〜３６）
	CASE 5
		出現最高レベル = 36
		出現最低レベル = 30
	;７Ｆ（ＬＶ３７〜４３）
	CASE 6
		出現最高レベル = 43
		出現最低レベル = 37
	;８Ｆ（ＬＶ４４〜５０）
	CASE 7
		出現最高レベル = 50
		出現最低レベル = 44
	;９Ｆ（ＬＶ５１〜５７）
	CASE 8
		出現最高レベル = 57
		出現最低レベル = 51
	;１０Ｆ（ＬＶ５８〜）
	CASE 9
		出現最高レベル = 100
		出現最低レベル = 58
ENDSELECT

FOR COUNT, 1, 1800
	;- 悪魔出現能力判定部 -------------------------------------------------------------------------
	;CSVがあるか確認、なければ弾く
	SIF EXISTCSV(COUNT, 0) == 0
		CONTINUE
	;レベルがフロアに合わない場合は弾く
	SIF CSVBASE(COUNT, GETNUM(BASE, "LV")) > 出現最高レベル || CSVBASE(COUNT, GETNUM(BASE, "LV")) < 出現最低レベル
		CONTINUE

	;一部特殊悪魔は条件次第で出現させる
	SIF COUNT == [[キャラ:ハールート]]
		GOTO SET_ENEMYS_NO
	SIF COUNT == [[キャラ:マールート]]
		GOTO SET_ENEMYS_NO

	;解析率が50未満の悪魔は出現しない
	SIF FLAG:(COUNT+20000) < 500
		CONTINUE
	;特殊合体のみ、合体条件有り、全書召喚不可は弾く
	SIF CSVCFLAG(COUNT, GETNUM(CFLAG, "特殊合体のみ")) || CSVCFLAG(COUNT, GETNUM(CFLAG, "合体条件有り")) || CSVCFLAG(COUNT, GETNUM(CFLAG, "全書召喚不可"))
		CONTINUE

	;- 悪魔出現ダンジョン設定判定部と出現追加処理 -------------------------------------------------
	$SET_ENEMYS_NO
	;ダークおやじでオンナ悪魔のみに設定している場合
	SIF ダンジョンフラグ:94:2 == 1 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 0
		CONTINUE
	;ダークおやじでオトコ悪魔のみに設定している場合
	SIF ダンジョンフラグ:94:2 == 2 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 1
		CONTINUE
	出現悪魔:LOCAL = COUNT
	LOCAL ++
NEXT

;レア?悪魔処理
;メガテン系イベント以外不許可の場合は出現させない
IF GETBIT(FLAG:EXTRAイベント設定, 0) == 0
	FOR COUNT, 5000, 5049
		;CSVがあるか確認、なければ弾く
		SIF EXISTCSV(COUNT, 0) == 0
			CONTINUE
		;レベルがフロアに合わない場合は弾く
		SIF CSVBASE(COUNT, GETNUM(BASE, "LV")) > 出現最高レベル || CSVBASE(COUNT, GETNUM(BASE, "LV")) < 出現最低レベル
			CONTINUE
		;ダークおやじでオンナ悪魔のみに設定している場合
		SIF ダンジョンフラグ:94:2 == 1 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 0
			CONTINUE
		;ダークおやじでオトコ悪魔のみに設定している場合
		SIF ダンジョンフラグ:94:2 == 2 && CSVTALENT(COUNT, GETNUM(TALENT, "オトコ")) != 1
			CONTINUE
		出現悪魔:LOCAL = COUNT
		LOCAL ++
		LOCAL:1 ++
	NEXT
ENDIF

;出現する悪魔の種類が十以下の場合にレア枠全てを消す

IF LOCAL < 11
	LOCAL -= LOCAL:1
	LOCAL:1 = 0
ENDIF

LOCAL:2 = LOCAL

;キャプスロックで出現出来ない悪魔をリストから除外して再構成
IF EQUIP:MASTER:CAPSLOCK && LOCAL:2 > 2
	LOCAL = 0
	FOR COUNT, 0, LOCAL:2
		IF CSVBASE(出現悪魔:COUNT, GETNUM(BASE, "LV")) > BASE:MASTER:LV - 12
			出現悪魔:LOCAL = 出現悪魔:COUNT
			LOCAL ++
		ELSEIF COUNT > LOCAL:2 - LOCAL:1 -1
			LOCAL:1 --
		ENDIF
	NEXT
;出現悪魔の種類が3以下だとエラーを吐く可能性があるのでキャプスロックで出現出来ないであろう適当な悪魔で防止
	IF LOCAL < 3 && LOCAL > 0
;レア枠悪魔をずらす
		IF LOCAL:1 > 0
			FOR COUNT, 0, LOCAL:1
				出現悪魔:(2 - COUNT) = 出現悪魔:(LOCAL - COUNT -1)
			NEXT
		ENDIF
;ずらした数に応じて出現できないであろう悪魔で埋める
		IF LOCAL == 1
			IF LOCAL:1
				出現悪魔:1 = 501
				出現悪魔:0 = 1028
			ELSE
				出現悪魔:1 = 501
				出現悪魔:2 = 1028
			ENDIF
		ELSE
			IF LOCAL:1 == 2
				出現悪魔:0 = 1028
			ELSEIF LOCAL:1 == 1
				出現悪魔:1 = 1028
			ELSE
				出現悪魔:2 = 1028
			ENDIF
		ENDIF
		LOCAL = 3
	ENDIF
ENDIF

IF LOCAL:2 < 3 || LOCAL == 0 || LOCAL == LOCAL:1
	SELECTCASE RAND:6
		CASE IS < 1
			RETURN [[キャラ:ピクシー]],3
		CASE IS < 2
			RETURN [[キャラ:ハーピー]],4
		CASE IS < 3
			RETURN [[キャラ:アプサラス]],5
		CASE IS < 4
			RETURN [[キャラ:ノッカー]],4
		CASE IS < 5
			RETURN [[キャラ:チョンチョン]],4
		CASE IS < 6
			RETURN [[キャラ:ガキ]],4
	ENDSELECT
ELSE
	;登録した悪魔の数を保存
	出現する悪魔の種類 = LOCAL
	;番号をランダムで選出
	;15%でレア枠出現するよう調整
	IF (RAND:100 < 15) && (LOCAL:1 > 0)
		LOCAL = (出現する悪魔の種類 - (LOCAL:1)) + RAND:(LOCAL:1)
	ELSEIF (出現する悪魔の種類  - (LOCAL:1)) > 0
		LOCAL = RAND:(出現する悪魔の種類 - (LOCAL:1))
	ENDIF
	;出現悪魔決定、レベルはＣＳＶのデータのまま
	RETURN 出現悪魔:LOCAL, CSVBASE(出現悪魔:LOCAL, GETNUM(BASE, "LV"))
ENDIF


;=======================================================================
;宝箱の中身
;=======================================================================
@TREASURE_94
#LOCALSIZE 3
;宝箱のフラグ管理用変数の番号
LOCAL = FLAG:現M + 70
;そのマップの何番目の宝箱か
LOCAL:1 = (DA:(FLAG:現X):(FLAG:現Y) / 10) % 100

;/10はIDを10で割る。つまり、下一桁をなくして、二桁目と三桁目を二桁の数字として取り出している
SELECTCASE DA:(FLAG:現X):(FLAG:現Y) / 10
	;マップ番号*100+そのマップで何番目の宝箱かを示す数値でどの宝箱かを判別します。
	;例えば0の場合、0版のマップの0番目の宝箱であることを表しています。

ENDSELECT
RETURN 1

;=======================================================================
;階段置き場
;=======================================================================
;上り階段処理
@UPSTAIRS_94
;位置とIDが対応しているはずなので、同IDの階段を探させれば良い
SELECTCASE FLAG:現M
	CASEELSE
		CALL DUNGEON_UPSTAIRS_ID, FLAG:現M+1 , DA:(FLAG:現X):(FLAG:現Y) + 1000 + 1
ENDSELECT
RETURN 1

;下り階段処理
@DOWNSTAIRS_94
SELECTCASE FLAG:現M
	CASEELSE
		CALL DUNGEON_DOWNSTAIRS_ID, FLAG:現M-1 , DA:(FLAG:現X):(FLAG:現Y) - 1000 - 1
ENDSELECT
RETURN 1

;=======================================================================
;エレベーター定義
;=======================================================================
;ARGはそのエレベーターのタイル
@DUNGEON_ELEVATOR_94, ARG
;RESULT:1〜5にエレベータが存在するマップの番号を代入し、RESULTS:1〜5には表示したい名称を代入、RETURNでは-1を返しておく
RESULT:1 = 1
RESULT:2 = 3
RESULT:3 = 5
RESULT:4 = 7
RESULT:5 = 9
RESULT:6 = 10
RESULTS:1 = ２Ｆ
RESULTS:2 = ４Ｆ
RESULTS:3 = ６Ｆ
RESULTS:4 = ８Ｆ
RESULTS:5 = １０Ｆ
RESULTS:6 = １１Ｆ
RETURN -1

;=======================================================================
;輪姦参加悪魔
;=======================================================================
@DUNGEON_RAPE_DEVIL_94
;ランダムにどの悪魔が出るか決定
;RETURN CSV番号 , 人数 , レベル
SELECTCASE RAND:3
	CASE 0
		RETURN [[キャラ:ガキ]] , 3 + RAND:10 , CSVBASE([[キャラ:ガキ]] , GETNUM(BASE , "LV") , 0) + RAND:3
	CASE 1
		RETURN [[キャラ:コボルト]] , 3 + RAND:10 , CSVBASE([[キャラ:コボルト]] , GETNUM(BASE , "LV") , 0) + RAND:3
	CASE 2
		RETURN [[キャラ:ゾンビくん]] , 3 + RAND:10 , CSVBASE([[キャラ:ゾンビくん]] , GETNUM(BASE , "LV") , 0) + RAND:3
ENDSELECT


